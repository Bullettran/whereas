
// https://nuxt.com/docs/api/configuration/nuxt-config
// @ts-ignore
export default defineNuxtConfig({
    compatibilityDate: '2024-11-01',
    devtools: {enabled: true},
    ssr: false,
    typescript: {
        typeCheck: true
    },
    app: {
        head: {
            title: "Whereas"
        },
    },
    modules: [
        //https://nuxt.com/modules/icons
        "nuxt-icons",
        //https://www.npmjs.com/package/@nuxt/image
        "@nuxt/image",
        //https://pinia.vuejs.org/ssr/nuxt.html
        "@pinia/nuxt",
        //https://nuxt.com/modules/pinia-plugin-persistedstate
        "pinia-plugin-persistedstate/nuxt",
        //https://nuxt.com/modules/auth-utils
        "nuxt-auth-utils",
        //https://primevue.org/nuxt
        "@primevue/nuxt-module"
    ],
    css: [
        "./assets/scss/base/colors.css",
        "./assets/scss/base/_general.scss",
        "./assets/scss/modules/_modules.scss",
        "./public/fonts/fonts.css",
    ],

    vite: {
        css: {
            preprocessorOptions: {
                scss: {
                    additionalData: '@use "./assets/scss/helpers/_helpers.scss" as *;',
                },
            },
        },
    },
    runtimeConfig: {
        public: {
            baseURL: "http://localhost:3000/",
            supabaseUrl: "https://qalibeksqgsabiiccnwf.supabase.co",
            supabaseKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFhbGliZWtzcWdzYWJpaWNjbndmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1OTk1MDEsImV4cCI6MjA1OTE3NTUwMX0.U48U65ir4RoFwtICsqTbDIiyYfFNWlrqvc6F8F1aJ58",
        },
    },
})

<template>
    <NuxtLayout>
        <NuxtPage/>
    </NuxtLayout>
</template>
<script setup lang="ts">
</script>
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare",
    "drizzle:studio": "npx drizzle-kit studio"
  },
  "dependencies": {
    "@nuxt/image": "^1.8.1",
    "@pinia/nuxt": "^0.9.0",
    "@primeuix/themes": "^1.0.0",
    "@primevue/forms": "^4.3.2",
    "@supabase/supabase-js": "^2.49.4",
    "@vee-validate/nuxt": "^4.15.0",
    "@vee-validate/rules": "^4.15.0",
    "bcrypt": "^5.1.1",
    "bootstrap": "^5.3.3",
    "drizzle-orm": "^0.38.3",
    "gsap": "^3.12.7",
    "howler": "^2.2.4",
    "nuxt": "^3.15.0",
    "nuxt-auth-utils": "^0.5.7",
    "nuxt-icons": "^3.2.1",
    "pinia": "^2.3.0",
    "pinia-plugin-persistedstate": "^4.2.0",
    "postgres": "^3.4.5",
    "primevue": "^4.3.2",
    "swiper": "^11.2.6",
    "three": "^0.175.0",
    "vue": "latest",
    "vue-router": "latest"
  },
  "devDependencies": {
    "@primevue/nuxt-module": "^4.3.2",
    "@types/bcrypt": "^5.0.2",
    "@types/howler": "^2.2.12",
    "@types/node": "^22.10.2",
    "drizzle-kit": "^0.30.1",
    "sass": "^1.85.1",
    "typescript": "^5.7.2",
    "vue-tsc": "^2.1.10"
  }
}

<script lang="ts">
import { defineComponent, reactive } from "vue";
import Dice from "~/components/global/dice/dice.vue";

// Константы для типов карт и эффектов
const CARD_TYPES = {
    ATTACK: "Атака",
    DEFENSE: "Защита",
    MAGIC: "Магия",
    HEAL: "Лечение",
    BUFF: "Бафф",
    CONTROL: "Контроль", // Добавлен тип CONTROL для новых карт
    UTILITY: "Утилита",  // Добавлен тип UTILITY для новых карт
} as const;

const EFFECT_TYPES = {
    BLEED: "bleed",
    REGEN: "regen",
    BUFF: "buff",
    IMMUNE: "immune",
    POISON: "poison",  // Активирован тип POISON
    BURN: "burn",      // Добавлен тип BURN для эффекта горения
    FREEZE: "freeze",  // Добавлен тип FREEZE для заморозки
    STUN: "stun",      // Добавлен тип STUN для оглушения
    HEAL_BLOCK: "healBlock", // Добавлен тип HEAL_BLOCK для блокировки исцеления
} as const;

// Типы для TypeScript
interface Card {
    id: string;        // Добавлено поле id
    name: string;
    type: string;
    rare: string;
    description: string;
    count: number;
    icon: string;
    bonus: {
        [key: string]: number | boolean | { [key: string]: number | boolean };
    };
    manaCost: number;
    duration?: number;
    level?: number;    // Добавлено поле level
    maxLevel?: number; // Добавлено поле maxLevel
    upgradeCost?: number; // Добавлено поле upgradeCost
    upgradeEffect?: { [key: string]: any }; // Добавлено поле upgradeEffect
}

interface Effect {
    type: string;
    duration: number;
    val: number;
    sourceCard?: string;
    icon: string;
    stat?: string;
}

interface Stats {
    attack: number;
    critical: number;
    hp: number;
    mp: number;
    hitChance: number;
    dodge: number;
    speed: number;
    defence: number;
    currentHp: number;
    currentMp: number;
}

interface CardBonuses {
    attack: number;
    critical: number;
    hp: number;
    mp: number;
    hitChance: number;
    dodge: number;
    speed: number;
    defence: number;
    ignoreDefense?: number; // Добавлено для игнорирования защиты
    debuffImmune?: boolean; // Добавлено для иммунитета к дебаффам
}

export default defineComponent({
    name: "Index",
    components: { Dice },
    setup() {
        const char = usePersonState();
        const allCards = {
            ranger: [
                {
                    id: "ranger-Sniper-shot",
                    name: "Снайперский выстрел",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 3 урона, +100% шанс попадания на 1 ход",
                    icon: "ranger-sniper-shot.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 3, buff: { hitChance: true, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1, buff: { hitChance: true, duration: 0.2 } },
                },
                {
                    id: "ranger-Hunter's-mark",
                    name: "Метка охотника",
                    type: "buff",
                    rare: "rare",
                    description: "Накладывает кровотечение (2 урона за ход, 3 хода)",
                    icon: "ranger-hunters-mark.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { debuff: { bleed: { value: 2, duration: 3 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { bleed: { value: 1, duration: 0.3 } } },
                },
                {
                    id: "ranger-Rapid-fire",
                    name: "Быстрая стрельба",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 5 урона, накладывает яд (2 урона за ход, 3 хода)",
                    icon: "ranger-rapid-fire.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 5, debuff: { poison: { value: 2, duration: 3 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1, debuff: { poison: { value: 0.5, duration: 0.3 } } },
                },
                {
                    id: "ranger-Hunting-trap",
                    name: "Охотничья ловушка",
                    type: "control",
                    rare: "rare",
                    description: "Замедляет врага (-5 скорости на 2 хода)",
                    icon: "ranger-hunting-trap.png",
                    manaCost: 1,
                    count: 1,
                    bonus: { debuff: { speed: -5, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { speed: -0.5, duration: 0.2 } },
                },
                {
                    id: "ranger-Explosive-shot",
                    name: "Взрывной выстрел",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 урона, +5 уклонения на 2 хода",
                    icon: "ranger-explosive-shot.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { attack: 2, buff: { dodge: 5, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5, buff: { dodge: 1, duration: 0.2 } },
                },
                {
                    id: "ranger-Aimed-shot",
                    name: "Меткий выстрел",
                    type: "attack",
                    rare: "common",
                    description: "Наносит 2 урона, +10 меткости на 2 хода",
                    icon: "ranger-aimed-shot.png",
                    manaCost: 2,
                    count: 2,
                    bonus: { attack: 2, buff: { hitChance: 10, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 3,
                    upgradeEffect: { attack: 0.5, buff: { hitChance: 1, duration: 0.2 } },
                },
                {
                    id: "ranger-Healing-salve",
                    name: "Целебный бальзам",
                    type: "heal",
                    rare: "common",
                    description: "Восстанавливает 3 HP",
                    icon: "ranger-healing-salve.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { hp: 3 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 3,
                    upgradeEffect: { hp: 1 },
                },
                {
                    id: "ranger-Camouflage",
                    name: "Камуфляж",
                    type: "defense",
                    rare: "rare",
                    description: "+30 уклонения на 2 хода",
                    icon: "ranger-camouflage.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { dodge: 30, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { dodge: 2, duration: 0.2 } },
                },
                {
                    id: "ranger-Hunter's-sense",
                    name: "Чувство охотника",
                    type: "buff",
                    rare: "epic",
                    description: "+5 урона, +10% шанс критического удара на 1 ход",
                    icon: "ranger-hunters-sense.png",
                    manaCost: 4,
                    count: 1,
                    bonus: { buff: { attack: 5, critical: 10, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 7,
                    upgradeEffect: { buff: { attack: 1, critical: 2, duration: 0.2 } },
                },
            ],
            wrecker: [
                {
                    id: "wrecker-Smash",
                    name: "Сокрушение",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 3 урона, игнорирует 50% защиты на 2 хода",
                    icon: "wrecker-smash.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 3, buff: { ignoreDefense: 50, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1, buff: { ignoreDefense: 2, duration: 0.2 } },
                },
                {
                    id: "wrecker-Diamond-shield",
                    name: "Алмазный щит",
                    type: "defense",
                    rare: "rare",
                    description: "+2 защиты, +1 урона на 2 хода",
                    icon: "wrecker-diamond-shield.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { defence: 2, attack: 1, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { defence: 1, attack: 0.5, duration: 0.2 } },
                },
                {
                    id: "wrecker-Shock-wave",
                    name: "Ударная волна",
                    type: "control",
                    rare: "rare",
                    description: "Оглушает на 1 ход, -20% защиты на 2 хода",
                    icon: "wrecker-shock-wave.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { debuff: { stun: true, ignoreDefense: 20, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { stun: true, ignoreDefense: 2, duration: 0.2 } },
                },
                {
                    id: "wrecker-Surge-of-strength",
                    name: "Прилив сил",
                    type: "heal",
                    rare: "rare",
                    description: "Восстанавливает 4 HP",
                    icon: "wrecker-surge-of-strength.png",
                    manaCost: 2,
                    count: 4,
                    bonus: { hp: 4 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { hp: 1 },
                },
                {
                    id: "wrecker-Crystal-infusion",
                    name: "Кристальная инфузия",
                    type: "buff",
                    rare: "rare",
                    description: "+4 урона, невосприимчивость к дебаффам на 3 хода",
                    icon: "wrecker-crystal-infusion.png",
                    manaCost: 5,
                    count: 1,
                    bonus: { buff: { attack: 4, debuffImmune: true, duration: 3 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { attack: 1, debuffImmune: true, duration: 0.3 } },
                },
                {
                    id: "wrecker-Farcical-blow",
                    name: "Фарсированный удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 3 урона",
                    icon: "wrecker-farcical-blow.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { attack: 3 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1 },
                },
                {
                    id: "wrecker-Crystallization",
                    name: "Кристаллизация",
                    type: "defense",
                    rare: "rare",
                    description: "+10 защиты на 1 ход",
                    icon: "wrecker-crystallization.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { defence: 10, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { defence: 2, duration: 0.2 } },
                },
                {
                    id: "wrecker-Jeweler's-precision",
                    name: "Точность ювелира",
                    type: "buff",
                    rare: "rare",
                    description: "+100% меткости на 2 хода",
                    icon: "wrecker-jewelers-precision.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { hitChance: true, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { hitChance: true, duration: 0.3 } },
                },
                {
                    id: "wrecker-Powerful-blow",
                    name: "Мощный удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 урона, +1 урона на 1 ход",
                    icon: "wrecker-powerful-blow.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { attack: 2, buff: { attack: 1, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1, buff: { attack: 0.5, duration: 0.2 } },
                },
            ],
            arcanist: [
                {
                    id: "arcanist-Fireball",
                    name: "Огненный шар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 3 магического урона",
                    icon: "arcanist-fireball.png",
                    manaCost: 5,
                    count: 1,
                    bonus: { attack: 3 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1 },
                },
                {
                    id: "arcanist-Frost-arrow",
                    name: "Ледяная стрела",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 магического урона, замораживает на 1 ход",
                    icon: "arcanist-frost-arrow.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 2, debuff: { freeze: { duration: 1 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5, debuff: { freeze: { duration: 0.2 } } },
                },
                {
                    id: "arcanist-Magical-flash",
                    name: "Магическая вспышка",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 1 магического урона, замораживает на 1 ход",
                    icon: "arcanist-magical-flash.png",
                    manaCost: 1,
                    count: 1,
                    bonus: { attack: 1, debuff: { freeze: { duration: 1 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.3, debuff: { freeze: { duration: 0.2 } } },
                },
                {
                    id: "arcanist-Frost-barrier",
                    name: "Ледяной барьер",
                    type: "defense",
                    rare: "rare",
                    description: "+4 защиты, замораживает врагов на 1 ход при защите",
                    icon: "arcanist-frost-barrier.png",
                    manaCost: 4,
                    count: 1,
                    bonus: { buff: { defence: 4, duration: 1 }, debuff: { freeze: { duration: 1 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { defence: 1, duration: 0.2 }, debuff: { freeze: { duration: 0.2 } } },
                },
                {
                    id: "arcanist-Magic-trick",
                    name: "Магическая уловка",
                    type: "utility",
                    rare: "rare",
                    description: "Восстанавливает 5 маны на 3 хода",
                    icon: "arcanist-magic-trick.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { mp: 5, duration: 3 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { mp: 1, duration: 0.3 } },
                },
                {
                    id: "arcanist-Surge-of-power",
                    name: "Прилив сил",
                    type: "heal",
                    rare: "rare",
                    description: "Восстанавливает 4 HP и 4 маны",
                    icon: "arcanist-surge-of-power.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { hp: 4, buff: { mp: 4 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { hp: 1, buff: { mp: 1 } },
                },
                {
                    id: "arcanist-Rings-of-cold",
                    name: "Кольца холода",
                    type: "control",
                    rare: "rare",
                    description: "Замораживает врагов на 2 хода",
                    icon: "arcanist-rings-of-cold.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { debuff: { freeze: { duration: 2 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { freeze: { duration: 0.3 } } },
                },
                {
                    id: "arcanist-True-trinity",
                    name: "Истинное тринити",
                    type: "attack",
                    rare: "epic",
                    description: "Наносит 5 магического урона, накладывает горение (2 урона за ход, 3 хода), замораживает на 1 ход",
                    icon: "arcanist-true-trinity.png",
                    manaCost: 7,
                    count: 1,
                    bonus: { attack: 5, debuff: { burn: { value: 2, duration: 3 }, freeze: { duration: 1 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 7,
                    upgradeEffect: { attack: 1, debuff: { burn: { value: 0.5, duration: 0.3 }, freeze: { duration: 0.2 } } },
                },
                {
                    id: "arcanist-Hidden-knowledge",
                    name: "Скрытые знания",
                    type: "buff",
                    rare: "rare",
                    description: "+5 магического урона на 2 хода",
                    icon: "arcanist-hidden-knowledge.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { attack: 5, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { attack: 1, duration: 0.3 } },
                },
                {
                    id: "arcanist-Magic-shield",
                    name: "Магический щит",
                    type: "defense",
                    rare: "common",
                    description: "+3 защиты на 2 хода",
                    icon: "arcanist-magic-shield.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { defence: 3, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 3,
                    upgradeEffect: { buff: { defence: 1, duration: 0.2 } },
                },
                {
                    id: "arcanist-Lightning",
                    name: "Молния",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 3 магического урона",
                    icon: "arcanist-lightning.png",
                    manaCost: 4,
                    count: 1,
                    bonus: { attack: 3 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1 },
                },
                {
                    id: "arcanist-magic-explosion",
                    name: "Магический взрыв",
                    type: "attack",
                    rare: "epic",
                    description: "Наносит 2 магического урона всем врагам",
                    icon: "arcanist-magic-explosion.png",
                    manaCost: 6,
                    count: 1,
                    bonus: { attack: 2, aoe: true },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 7,
                    upgradeEffect: { attack: 0.5 },
                },
                {
                    id: "arcanist-Mana-restore",
                    name: "Восстановление маны",
                    type: "buff",
                    rare: "common",
                    description: "Восстанавливает 5 маны",
                    icon: "arcanist-mana-restore.png",
                    manaCost: 0,
                    count: 1,
                    bonus: { buff: { mp: 5 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 3,
                    upgradeEffect: { buff: { mp: 1 } },
                },
                {
                    id: "arcanist-Ice-barrier",
                    name: "Ледяной барьер",
                    type: "defense",
                    rare: "rare",
                    description: "+2 защиты на 2 хода",
                    icon: "arcanist-ice-barrier.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { defence: 2, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { defence: 1, duration: 0.2 } },
                },
                {
                    id: "arcanist-Fire-arrow",
                    name: "Огненная стрела",
                    type: "attack",
                    rare: "common",
                    description: "Наносит 2 магического урона",
                    icon: "arcanist-fire-arrow.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { attack: 2 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 3,
                    upgradeEffect: { attack: 0.5 },
                },
                {
                    id: "arcanist-Magic-aura",
                    name: "Магическая аура",
                    type: "buff",
                    rare: "rare",
                    description: "+2 магического урона на 2 хода",
                    icon: "arcanist-magic-aura.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { attack: 2, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { attack: 0.5, duration: 0.2 } },
                },
                {
                    id: "arcanist-Freeze",
                    name: "Заморозка",
                    type: "control",
                    rare: "rare",
                    description: "Замораживает врага на 1 ход",
                    icon: "arcanist-freeze.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { debuff: { freeze: { duration: 1 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { freeze: { duration: 0.3 } } },
                },
            ],
            monk: [
                {
                    id: "monk-Meditation",
                    name: "Медитация",
                    type: "buff",
                    rare: "rare",
                    description: "+3 защиты, +3 урона на 3 хода",
                    icon: "monk-meditation.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { defence: 3, attack: 3, duration: 3 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { defence: 1, attack: 1, duration: 0.3 } },
                },
                {
                    id: "monk-spiritual-strike",
                    name: "Духовный удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 урона, +20% шанс критического удара",
                    icon: "monk-spiritual-strike.png",
                    manaCost: 5,
                    count: 1,
                    bonus: { attack: 2, buff: { critical: 20 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1, buff: { critical: 2 } },
                },
                {
                    id: "monk-Tiger-strike",
                    name: "Удар тигра",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 урона, +2 урона на 2 хода",
                    icon: "monk-tiger-strike.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { attack: 2, buff: { attack: 2, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5, buff: { attack: 0.5, duration: 0.2 } },
                },
                {
                    id: "monk-Dragon-strike",
                    name: "Удар дракона",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 урона, накладывает горение (2 урона за ход, 2 хода)",
                    icon: "monk-dragon-strike.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 2, debuff: { burn: { value: 2, duration: 2 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5, debuff: { burn: { value: 0.5, duration: 0.2 } } },
                },
                {
                    id: "monk-Stone-armor",
                    name: "Каменный доспех",
                    type: "defense",
                    rare: "rare",
                    description: "Блокирует атаку на 1 ход",
                    icon: "monk-stone-armor.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { immune: true, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { immune: true, duration: 0.2 } },
                },
                {
                    id: "monk-Balance",
                    name: "Равновесие",
                    type: "heal",
                    rare: "rare",
                    description: "Исцеляет 1 HP в течение 4 ходов",
                    icon: "monk-balance.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { hp: 1, duration: 4 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { hp: 0.5, duration: 0.4 } },
                },
                {
                    id: "monk-Path-of-goodness",
                    name: "Путь добра",
                    type: "heal",
                    rare: "epic",
                    description: "Исцеляет 100% HP, блокирует исцеление на 7 ходов",
                    icon: "monk-path-of-goodness.png",
                    manaCost: 4,
                    count: 1,
                    bonus: { hp: 20, debuff: { healBlock: true, duration: 7 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 7,
                    upgradeEffect: { debuff: { healBlock: true, duration: -0.7 } },
                },
                {
                    id: "monk-Path-of-hate",
                    name: "Путь ненависти",
                    type: "buff",
                    rare: "epic",
                    description: "+4 урона на 7 ходов, блокирует исцеление",
                    icon: "monk-path-of-hate.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { attack: 4, duration: 7 }, debuff: { healBlock: true, duration: 7 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 7,
                    upgradeEffect: { buff: { attack: 1, duration: -0.5 }, debuff: { healBlock: true, duration: -0.5 } },
                },
                {
                    id: "monk-Strike-of-the-rising-sun",
                    name: "Удар восходящего солнца",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 1 урон, восстанавливает 2 маны на 2 хода",
                    icon: "monk-strike-of-the-rising-sun.png",
                    manaCost: 1,
                    count: 1,
                    bonus: { attack: 1, buff: { mp: 2, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.3, buff: { mp: 0.5, duration: 0.2 } },
                },
            ],
            inferno: [
                {
                    id: "inferno-Hell-explosion",
                    name: "Адский взрыв",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 магического урона",
                    icon: "inferno-hell-explosion.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 2 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5 },
                },
                {
                    id: "inferno-Flame-shield",
                    name: "Огненный щит",
                    type: "defense",
                    rare: "rare",
                    description: "+3 защиты на 2 хода, накладывает горение (1 урона за ход, 2 хода)",
                    icon: "inferno-flame-shield.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { defence: 3, duration: 2 }, debuff: { burn: { value: 1, duration: 2 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { defence: 1, duration: 0.2 }, debuff: { burn: { value: 0.3, duration: 0.2 } } },
                },
                {
                    id: "inferno-Wrath-of-Inferno",
                    name: "Гнев инферно",
                    type: "buff",
                    rare: "epic",
                    description: "+3 магического урона на 6 ходов",
                    icon: "inferno-wrath-of-Inferno.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { attack: 3, duration: 6 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 7,
                    upgradeEffect: { buff: { attack: 1, duration: 0.4 } },
                },
                {
                    id: "inferno-Eternal-flame",
                    name: "Вечное пламя",
                    type: "attack",
                    rare: "rare",
                    description: "Накладывает горение (2 урона за ход, 5 ходов)",
                    icon: "inferno-eternal-flame.png",
                    manaCost: 5,
                    count: 1,
                    bonus: { debuff: { burn: { value: 2, duration: 5 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { burn: { value: 0.5, duration: 0.5 } } },
                },
                {
                    id: "inferno-Live-bomb",
                    name: "Живая бомба",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 3 магического урона, +2 урона на 1 ход",
                    icon: "inferno-live-bomb.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 3, buff: { attack: 2, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1, buff: { attack: 0.5, duration: 0.2 } },
                },
                {
                    id: "inferno-Holy-flame",
                    name: "Святое пламя",
                    type: "heal",
                    rare: "rare",
                    description: "Исцеляет на 5 HP",
                    icon: "inferno-holy-flame.png",
                    manaCost: 5,
                    count: 1,
                    bonus: { hp: 5 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { hp: 1 },
                },
                {
                    id: "inferno-Small-flame",
                    name: "Малое пламя",
                    type: "attack",
                    rare: "common",
                    description: "Наносит 1 магического урона, накладывает горение (2 урона за ход, 2 хода)",
                    icon: "inferno-small-flame.png",
                    manaCost: 1,
                    count: 1,
                    bonus: { attack: 1, debuff: { burn: { value: 2, duration: 2 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 3,
                    upgradeEffect: { attack: 0.3, debuff: { burn: { value: 0.5, duration: 0.2 } } },
                },
                {
                    id: "inferno-Flame-control",
                    name: "Контроль пламени",
                    type: "control",
                    rare: "rare",
                    description: "Оглушает на 1 ход",
                    icon: "inferno-flame-control.png",
                    manaCost: 1,
                    count: 1,
                    bonus: { debuff: { stun: true, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { stun: true, duration: 0.2 } },
                },
                {
                    id: "inferno-Blade-of-flame",
                    name: "Клинок пламени",
                    type: "buff",
                    rare: "rare",
                    description: "+2 магического урона на 2 хода",
                    icon: "inferno-blade-of-flame.png",
                    manaCost: 1,
                    count: 1,
                    bonus: { buff: { attack: 2, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { attack: 0.5, duration: 0.2 } },
                },
            ],
            assassin: [
                {
                    id: "assassin-Fatal-strike",
                    name: "Смертельный удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 1 урон, +10% шанс критического удара на 3 хода",
                    icon: "assassin-fatal-strike.png",
                    manaCost: 5,
                    count: 1,
                    bonus: { attack: 1, buff: { critical: 10, duration: 3 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5, buff: { critical: 2, duration: 0.3 } },
                },
                {
                    id: "assassin-Poison-strike",
                    name: "Ядовитый удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 урона, накладывает яд (2 урона за ход, 3 хода)",
                    icon: "assassin-poison-strike.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 2, debuff: { poison: { value: 2, duration: 3 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5, debuff: { poison: { value: 0.5, duration: 0.3 } } },
                },
                {
                    id: "assassin-First-aid",
                    name: "Первая помощь",
                    type: "heal",
                    rare: "rare",
                    description: "Исцеляет 4 HP в течение 2 ходов",
                    icon: "assassin-first-aid.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { hp: 4, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { hp: 1, duration: 0.2 } },
                },
                {
                    id: "assassin-Little-tricks",
                    name: "Маленькие хитрости",
                    type: "buff",
                    rare: "rare",
                    description: "+3 урона на 2 хода",
                    icon: "assassin-little-tricks.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { attack: 3, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { attack: 1, duration: 0.2 } },
                },
                {
                    id: "assassin-Blind",
                    name: "Ослепление",
                    type: "control",
                    rare: "rare",
                    description: "30% шанс промаха у врага на 2 хода",
                    icon: "assassin-blind.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { debuff: { hitChance: -30, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { hitChance: -3, duration: 0.2 } },
                },
                {
                    id: "assassin-Insidious-strike",
                    name: "Коварный удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 1 урон, +1 урона на 1 ход",
                    icon: "assassin-insidious-strike.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { attack: 1, buff: { attack: 1, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5, buff: { attack: 0.3, duration: 0.2 } },
                },
                {
                    id: "assassin-Blow-to-the-heart",
                    name: "Удар в сердце",
                    type: "control",
                    rare: "rare",
                    description: "Оглушает на 1 ход",
                    icon: "assassin-blow-to-the-heart.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { debuff: { stun: true, duration: 1 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { stun: true, duration: 0.5 } },
                },
                {
                    id: "assassin-Deadly-technique",
                    name: "Смертельный прием",
                    type: "attack",
                    rare: "epic",
                    description: "Наносит 5 урона",
                    icon: "assassin-deadly-technique.png",
                    manaCost: 7,
                    count: 1,
                    bonus: { attack: 5 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 7,
                    upgradeEffect: { attack: 1 },
                },
                {
                    id: "assassin-Sprint",
                    name: "Спринт",
                    type: "buff",
                    rare: "rare",
                    description: "+5 скорости на 2 хода",
                    icon: "assassin-sprint.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { speed: 5, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { speed: 1, duration: 0.2 } },
                },
                {
                    id: "assassin-Shadow-veil",
                    name: "Теневая завеса",
                    type: "defense",
                    rare: "rare",
                    description: "+3 уклонения на 2 хода",
                    icon: "assassin-shadow-veil.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { dodge: 3, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { dodge: 1, duration: 0.2 } },
                },
                {
                    id: "assassin-Critical-strike",
                    name: "Критический удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 3 урона",
                    icon: "assassin-critical-strike.png",
                    manaCost: 4,
                    count: 1,
                    bonus: { attack: 3 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 1 },
                },
                {
                    id: "assassin-Stealth",
                    name: "Скрытность",
                    type: "defense",
                    rare: "rare",
                    description: "+5 уклонения на 2 хода",
                    icon: "assassin-stealth.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { buff: { dodge: 5, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { dodge: 1, duration: 0.2 } },
                },
                {
                    id: "assassin-Agility",
                    name: "Ловкость",
                    type: "buff",
                    rare: "rare",
                    description: "+3 скорости на 2 хода",
                    icon: "assassin-agility.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { speed: 3, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { speed: 1, duration: 0.2 } },
                },
                {
                    id: "assassin-Shadow-strike",
                    name: "Теневой удар",
                    type: "attack",
                    rare: "rare",
                    description: "Наносит 2 урона",
                    icon: "assassin-shadow-strike.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { attack: 2 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { attack: 0.5 },
                },
                {
                    id: "assassin-Poison-trap",
                    name: "Ядовитая ловушка",
                    type: "control",
                    rare: "rare",
                    description: "Накладывает яд (2 урона за ход, 3 хода)",
                    icon: "assassin-poison-trap.png",
                    manaCost: 3,
                    count: 1,
                    bonus: { debuff: { poison: { value: 2, duration: 3 } } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { debuff: { poison: { value: 0.5, duration: 0.3 } } },
                },
                {
                    id: "assassin-Quick-strike",
                    name: "Быстрый удар",
                    type: "attack",
                    rare: "common",
                    description: "Наносит 2 урона, +1 использование",
                    icon: "assassin-quick-strike.png",
                    manaCost: 2,
                    count: 2,
                    bonus: { attack: 2 },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 3,
                    upgradeEffect: { attack: 0.5 },
                },
                {
                    id: "assassin-Shadow-accuracy",
                    name: "Теневая меткость",
                    type: "buff",
                    rare: "rare",
                    description: "+3 меткости на 2 хода",
                    icon: "assassin-shadow-accuracy.png",
                    manaCost: 2,
                    count: 1,
                    bonus: { buff: { hitChance: 3, duration: 2 } },
                    level: 1,
                    maxLevel: 10,
                    upgradeCost: 5,
                    upgradeEffect: { buff: { hitChance: 1, duration: 0.2 } },
                },
            ],
        };
        return { char, allCards };
    },
    data: () => ({
        levelCards: [] as Card[],
        choices: Array(9).fill(null) as (Card | null)[],
        showDice: false,
        isAnimating: false,
        battleLog: [] as string[],
        selectedCards: 0,
        maxSelectedCards: 3,
        useCardIndices: [] as number[],
        baseStats: {
            person: {
                attack: 2,
                critical: 2,
                hp: 10,
                mp: 10,
                hitChance: 50,
                dodge: 20,
                speed: 2,
                defence: 3,
                currentHp: 10,
                currentMp: 10,
            },
            mob: {
                attack: 1,
                critical: 5,
                hp: 15,
                mp: 1,
                hitChance: 50,
                dodge: 20,
                speed: 1,
                defence: 5,
                currentHp: 15,
                currentMp: 1,
            },
        } as { person: Stats; mob: Stats },
        cardBonuses: {
            person: {
                attack: 0,
                critical: 0,
                hp: 0,
                mp: 0,
                hitChance: 0,
                dodge: 0,
                speed: 0,
                defence: 0,
                ignoreDefense: 0, // Добавлено для игнорирования защиты
                debuffImmune: false, // Добавлено для иммунитета к дебаффам
            },
            mob: { // Добавлены бонусы для моба
                attack: 0,
                critical: 0,
                hp: 0,
                mp: 0,
                hitChance: 0,
                dodge: 0,
                speed: 0,
                defence: 0,
                ignoreDefense: 0,
                debuffImmune: false,
            },
        } as { person: CardBonuses; mob: CardBonuses },
        activeEffects: {
            mob: [] as Effect[],
            person: [] as Effect[],
        },
        messages: {
            mob: { type: "", message: "" },
            person: { type: "", message: "" },
            turnKey: 0,
        },
        turnCount: 1,
        COMBO_TYPES: {
            CRITICAL: "critical",
            HIT_CHANCE: "hitChance",
            ATTACK: "attack",
        },
        isMobFrozen: false, // Добавлено для отслеживания заморозки моба
        isMobStunned: false, // Добавлено для отслеживания оглушения моба
        isPersonStunned: false, // Добавлено для отслеживания оглушения персонажа
    }),
    mounted() {
        this.initCards();
        this.baseStats.person.attack = this.char.character.stats.attack;
        this.baseStats.person.defence = this.char.character.stats.defence;
        this.baseStats.person.critical = 100;
        this.baseStats.person.hp = this.char.character.stats.hp;
        this.baseStats.person.mp = 40;
        this.baseStats.person.hitChance = 70;
        this.baseStats.person.dodge = this.char.character.stats.dodge;
        this.baseStats.person.speed = this.char.character.stats.speed;
        this.baseStats.person.currentHp = this.maxHp("person");
        this.baseStats.person.currentMp = this.maxMp("person");
    },
    computed: {
        personStats(): Stats & {
            physicalDmg: number;
            physicalDef: number;
        } {
            return {
                ...this.baseStats.person,
                physicalDmg: this.physicalDmg("person"),
                physicalDef: this.physicalDef("person"),
            };
        },
        mobStats(): Stats & {
            physicalDmg: number;
            physicalDef: number;
        } {
            return {
                ...this.baseStats.mob,
                physicalDmg: this.physicalDmg("mob"),
                physicalDef: this.physicalDef("mob"),
            };
        },
        isAttackDisabled(): boolean {
            return this.isAnimating;
        },
        activeCombos() {
            const lines = [
                { indices: [0, 3, 6], type: this.COMBO_TYPES.CRITICAL },    // 1-4-7
                { indices: [1, 4, 7], type: this.COMBO_TYPES.HIT_CHANCE },  // 2-5-8
                { indices: [2, 5, 8], type: this.COMBO_TYPES.ATTACK },      // 3-6-9
            ];

            return lines.filter(line =>
                line.indices.every(index => this.choices[index] !== null),
            ).map(line => line.type);
        },
        comboIndices() {
            const indices = new Set<number>();

            if (this.activeCombos.includes(this.COMBO_TYPES.CRITICAL)) {
                [0, 3, 6].forEach(index => indices.add(index));
            }
            if (this.activeCombos.includes(this.COMBO_TYPES.HIT_CHANCE)) {
                [1, 4, 7].forEach(index => indices.add(index));
            }
            if (this.activeCombos.includes(this.COMBO_TYPES.ATTACK)) {
                [2, 5, 8].forEach(index => indices.add(index));
            }

            return Array.from(indices);
        },
    },
    methods: {
        // Получение значения статы с учетом бонусов
        getStat(target: "person" | "mob", stat: keyof Stats): number {
            const base = this.baseStats[target][stat];
            // @ts-ignore
            return base + (this.cardBonuses[target][stat] || 0);
        },

        // Максимальное здоровье
        maxHp(target: "person" | "mob", bonus: number = 0): number {
            return this.getStat(target, "hp") + bonus;
        },

        // Максимальная мана
        maxMp(target: "person" | "mob", bonus: number = 0): number {
            return this.getStat(target, "mp") + bonus;
        },

        // Физический урон
        physicalDmg(target: "person" | "mob", bonus: number = 0): number {
            let baseDmg = this.getStat(target, "attack") + bonus;
            const ignoreDefense = this.cardBonuses[target].ignoreDefense || 0;
            if (ignoreDefense > 0) {
                const enemy = target === "person" ? "mob" : "person";
                const enemyDef = this.physicalDef(enemy);
                baseDmg += Math.floor(enemyDef * (ignoreDefense / 100));
            }
            return baseDmg;
        },

        // Физическая защита
        physicalDef(target: "person" | "mob", bonus: number = 0): number {
            return this.getStat(target, "defence") + bonus;
        },

        // Скорость
        speed(target: "person" | "mob", bonus: number = 0): number {
            return this.getStat(target, "speed") + bonus;
        },

        // Уклонение
        dodge(target: "person" | "mob", bonus: number = 0): number {
            return this.getStat(target, "dodge") + bonus;
        },

        // Критический урон
        criticalDmg(target: "person" | "mob", bonus: number = 0): number {
            return this.getStat(target, "critical") + bonus;
        },

        // Шанс попадания
        hitChance(target: "person" | "mob", bonus: number = 0): number {
            return this.getStat(target, "hitChance") + bonus;
        },

        // Получение случайных карт
        getRandomCards(count: number): Card[] {
            const classCards = this.char.character.species.toLowerCase(); // Получаем класс персонажа
            // @ts-ignore
            const availableCards = this.allCards[classCards] || []; // Берем карты соответствующего класса
            const shuffled = [...availableCards].sort(() => 0.5 - Math.random());
            return shuffled.slice(0, count);
        },

        // Инициализация карт
        initCards() {
            this.levelCards = this.getRandomCards(5);
            this.choices = Array(9).fill(null);
            this.selectedCards = 0;
            this.useCardIndices = [];
            this.resetCardBonuses();
        },

        // Сброс бонусов карт
        resetCardBonuses() {
            this.cardBonuses.person = {
                attack: 0,
                critical: 0,
                hp: 0,
                mp: 0,
                hitChance: 0,
                dodge: 0,
                speed: 0,
                defence: 0,
                ignoreDefense: 0,
                debuffImmune: false,
            };
            this.cardBonuses.mob = {
                attack: 0,
                critical: 0,
                hp: 0,
                mp: 0,
                hitChance: 0,
                dodge: 0,
                speed: 0,
                defence: 0,
                ignoreDefense: 0,
                debuffImmune: false,
            };
        },

        // Добавление эффекта
        addEffect(target: "person" | "mob", effect: Effect) {
            const isImmune = this.cardBonuses[target].debuffImmune;
            // @ts-ignore
            if (isImmune && [EFFECT_TYPES.BLEED, EFFECT_TYPES.POISON, EFFECT_TYPES.BURN, EFFECT_TYPES.FREEZE, EFFECT_TYPES.STUN].includes(effect.type)) {
                this.addToLog(`${target === "person" ? "Персонаж" : "Моб"} заблокировал эффект ${effect.type} благодаря иммунитету!`);
                this.showActionText(target, "Заблокировано!", "heal");
                return;
            }
            this.activeEffects[target].push({ ...effect });
        },

        // Применение бонусов карт
        applyCardBonuses() {
            this.resetCardBonuses();

            this.activeCombos.forEach(combo => {
                switch (combo) {
                    case this.COMBO_TYPES.CRITICAL:
                        this.cardBonuses.person.critical += 5;
                        this.addToLog("Активирована комбинация: Критический урон +5%!");
                        break;
                    case this.COMBO_TYPES.HIT_CHANCE:
                        this.cardBonuses.person.hitChance += 5;
                        this.addToLog("Активирована комбинация: Шанс попадания +5%!");
                        break;
                    case this.COMBO_TYPES.ATTACK:
                        this.cardBonuses.person.attack += 1;
                        this.addToLog("Активирована комбинация: Атака +1!");
                        break;
                }
            });

            this.choices.forEach((choice) => {
                if (!choice) return;

                // Лечение
                if (choice.bonus.hp) {
                    const healBlock = this.activeEffects.person.some(e => e.type === EFFECT_TYPES.HEAL_BLOCK);
                    if (healBlock) {
                        this.addToLog("Исцеление заблокировано!");
                        this.showActionText("person", "Исцеление заблокировано!", "dmg");
                        return;
                    }
                    const hpValue = typeof choice.bonus.hp === "number" ? choice.bonus.hp : 0;
                    if (choice.duration) {
                        this.addEffect("person", {
                            type: EFFECT_TYPES.REGEN,
                            duration: choice.duration,
                            val: hpValue,
                            sourceCard: choice.name,
                            icon: choice.icon,
                        });
                    } else {
                        this.baseStats.person.currentHp = Math.min(
                            this.baseStats.person.currentHp + hpValue,
                            this.maxHp("person"),
                        );
                        this.addToLog(`Персонаж восстановил ${hpValue} HP!`);
                        this.showActionText("person", `+${hpValue} HP`, "heal");
                    }
                }

                // Мана
                if (choice.bonus.mp) {
                    const mpValue = typeof choice.bonus.mp === "number" ? choice.bonus.mp : 0;
                    if (choice.duration) {
                        this.addEffect("person", {
                            type: EFFECT_TYPES.BUFF,
                            duration: choice.duration,
                            val: mpValue,
                            stat: "mp",
                            sourceCard: choice.name,
                            icon: choice.icon,
                        });
                    } else {
                        this.baseStats.person.currentMp = Math.min(
                            this.baseStats.person.currentMp + mpValue,
                            this.maxMp("person"),
                        );
                        this.addToLog(`Персонаж восстановил ${mpValue} MP!`);
                        this.showActionText("person", `+${mpValue} MP`, "mana-restore");
                    }
                }

                // Эффекты с длительностью (баффы и дебаффы)
                if (choice.bonus.buff) {
                    const buff = choice.bonus.buff as { [key: string]: number | boolean };
                    const duration = (buff.duration as number) || 1;
                    for (const [stat, value] of Object.entries(buff)) {
                        if (stat === "duration") continue;
                        if (stat === "debuffImmune" && value) {
                            this.cardBonuses.person.debuffImmune = true;
                            this.addEffect("person", {
                                type: EFFECT_TYPES.IMMUNE,
                                duration: duration,
                                val: 1,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                        } else if (stat === "ignoreDefense") {
                            this.cardBonuses.person.ignoreDefense = value as number;
                            this.addEffect("person", {
                                type: EFFECT_TYPES.BUFF,
                                duration: duration,
                                val: value as number,
                                stat: "ignoreDefense",
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                        } else if (stat === "hitChance" && value === true) {
                            this.cardBonuses.person.hitChance = 100;
                            this.addEffect("person", {
                                type: EFFECT_TYPES.BUFF,
                                duration: duration,
                                val: 100,
                                stat: "hitChance",
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                        } else if (["attack", "defence", "dodge", "speed", "critical", "hitChance"].includes(stat)) {
                            // @ts-ignore
                            this.cardBonuses.person[stat as keyof CardBonuses] += value as number;
                            this.addEffect("person", {
                                type: EFFECT_TYPES.BUFF,
                                duration: duration,
                                val: value as number,
                                stat: stat,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                        }
                    }
                }

                // Дебаффы
                if (choice.bonus.debuff) {
                    const debuff = choice.bonus.debuff as { [key: string]: any };
                    const duration = (debuff.duration as number) || 1;
                    for (const [type, effect] of Object.entries(debuff)) {
                        if (type === "bleed") {
                            const bleed = effect as { value: number; duration: number };
                            this.addEffect("mob", {
                                type: EFFECT_TYPES.BLEED,
                                duration: bleed.duration || duration,
                                val: bleed.value,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                            this.addToLog(`У моба началось кровотечение (${bleed.value} урона за ход)`);
                        } else if (type === "poison") {
                            const poison = effect as { value: number; duration: number };
                            this.addEffect("mob", {
                                type: EFFECT_TYPES.POISON,
                                duration: poison.duration || duration,
                                val: poison.value,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                            this.addToLog(`Моб отравлен (${poison.value} урона за ход)`);
                        } else if (type === "burn") {
                            const burn = effect as { value: number; duration: number };
                            this.addEffect("mob", {
                                type: EFFECT_TYPES.BURN,
                                duration: burn.duration || duration,
                                val: burn.value,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                            this.addToLog(`Моб горит (${burn.value} урона за ход)`);
                        } else if (type === "freeze") {
                            this.addEffect("mob", {
                                type: EFFECT_TYPES.FREEZE,
                                duration: (effect as { duration: number }).duration || duration,
                                val: 0,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                            this.isMobFrozen = true;
                            this.addToLog("Моб заморожен!");
                        } else if (type === "stun") {
                            this.addEffect("mob", {
                                type: EFFECT_TYPES.STUN,
                                duration: duration,
                                val: 0,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                            this.isMobStunned = true;
                            this.addToLog("Моб оглушен!");
                        } else if (type === "healBlock") {
                            this.addEffect("person", {
                                type: EFFECT_TYPES.HEAL_BLOCK,
                                duration: duration,
                                val: 0,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                            this.addToLog("Исцеление персонажа заблокировано!");
                        } else if (type === "speed" || type === "hitChance" || type === "ignoreDefense") {
                            // @ts-ignore
                            this.cardBonuses.mob[type as keyof CardBonuses] += effect as number;
                            this.addEffect("mob", {
                                type: EFFECT_TYPES.BUFF,
                                duration: duration,
                                val: effect as number,
                                stat: type,
                                sourceCard: choice.name,
                                icon: choice.icon,
                            });
                        }
                    }
                }

                // Прямые бонусы
                for (const [stat, value] of Object.entries(choice.bonus)) {
                    if (["hp", "mp", "buff", "debuff"].includes(stat)) continue;
                    if (stat in this.cardBonuses.person) {
                        // @ts-ignore
                        this.cardBonuses.person[stat as keyof CardBonuses] += value as number;
                    }
                }
            });
        },

        // Обработка эффектов
        processEffects() {
            const isPersonImmune = this.cardBonuses.person.debuffImmune;
            const isMobImmune = this.cardBonuses.mob.debuffImmune;

            // Эффекты моба
            this.activeEffects.mob.forEach((effect) => {
                if (effect.type === EFFECT_TYPES.BLEED) {
                    this.baseStats.mob.currentHp = Math.max(
                        0,
                        this.baseStats.mob.currentHp - effect.val,
                    );
                    this.addToLog(`Кровотечение наносит ${effect.val} урона мобу`);
                    this.showActionText("mob", `-${effect.val} (кровотечение)`, "dmg");
                } else if (effect.type === EFFECT_TYPES.POISON && !isMobImmune) {
                    this.baseStats.mob.currentHp = Math.max(
                        0,
                        this.baseStats.mob.currentHp - effect.val,
                    );
                    this.addToLog(`Яд наносит ${effect.val} урона мобу`);
                    this.showActionText("mob", `-${effect.val} (яд)`, "dmg");
                } else if (effect.type === EFFECT_TYPES.BURN && !isMobImmune) {
                    this.baseStats.mob.currentHp = Math.max(
                        0,
                        this.baseStats.mob.currentHp - effect.val,
                    );
                    this.addToLog(`Горение наносит ${effect.val} урона мобу`);
                    this.showActionText("mob", `-${effect.val} (горение)`, "dmg");
                }
            });

            // Эффекты персонажа
            this.activeEffects.person.forEach((effect) => {
                if (effect.type === EFFECT_TYPES.BLEED && !isPersonImmune) {
                    this.baseStats.person.currentHp = Math.max(
                        0,
                        this.baseStats.person.currentHp - effect.val,
                    );
                    this.addToLog(`Кровотечение наносит ${effect.val} урона персонажу`);
                    this.showActionText("person", `-${effect.val} (кровотечение)`, "dmg");
                } else if (effect.type === EFFECT_TYPES.POISON && !isPersonImmune) {
                    this.baseStats.person.currentHp = Math.max(
                        0,
                        this.baseStats.person.currentHp - effect.val,
                    );
                    this.addToLog(`Яд наносит ${effect.val} урона персонажу`);
                    this.showActionText("person", `-${effect.val} (яд)`, "dmg");
                } else if (effect.type === EFFECT_TYPES.BURN && !isPersonImmune) {
                    this.baseStats.person.currentHp = Math.max(
                        0,
                        this.baseStats.person.currentHp - effect.val,
                    );
                    this.addToLog(`Горение наносит ${effect.val} урона персонажу`);
                    this.showActionText("person", `-${effect.val} (горение)`, "dmg");
                } else if (effect.type === EFFECT_TYPES.REGEN) {
                    const healBlock = this.activeEffects.person.some(e => e.type === EFFECT_TYPES.HEAL_BLOCK);
                    if (healBlock) {
                        this.addToLog("Регенерация заблокирована!");
                        this.showActionText("person", "Регенерация заблокирована!", "dmg");
                        return;
                    }
                    this.baseStats.person.currentHp = Math.min(
                        this.baseStats.person.currentHp + effect.val,
                        this.maxHp("person"),
                    );
                    this.addToLog(`Регенерация восстанавливает ${effect.val} HP`);
                    this.showActionText("person", `+${effect.val} HP (реген)`, "heal");
                } else if (effect.type === EFFECT_TYPES.BUFF && effect.stat === "mp") {
                    this.baseStats.person.currentMp = Math.min(
                        this.baseStats.person.currentMp + effect.val,
                        this.maxMp("person"),
                    );
                    this.addToLog(`Восстановление маны: +${effect.val} MP`);
                    this.showActionText("person", `+${effect.val} MP`, "mana-restore");
                }
            });

            // Кровотечение от моба каждые 2 хода
            if (this.turnCount % 2 === 0 && this.baseStats.mob.currentHp > 0) {
                if (!isPersonImmune) {
                    this.addEffect("person", {
                        type: EFFECT_TYPES.BLEED,
                        duration: 2,
                        val: 2,
                        sourceCard: "Атака моба",
                        icon: "bleed-1.png",
                    });
                    this.addToLog("Моб наложил кровотечение на персонажа!");
                } else {
                    this.addToLog("Моб пытался наложить кровотечение, но иммунитет заблокировал!");
                    this.showActionText("person", "Заблокировано!", "heal");
                }
            }

            this.turnCount++;
        },

        // Уменьшение длительности эффектов
        decreaseEffectDurations() {
            this.activeEffects.mob = this.activeEffects.mob.filter((effect) => {
                effect.duration -= 1;
                if (effect.type === EFFECT_TYPES.FREEZE && effect.duration <= 0) {
                    this.isMobFrozen = false;
                }
                if (effect.type === EFFECT_TYPES.STUN && effect.duration <= 0) {
                    this.isMobStunned = false;
                }
                return effect.duration > 0;
            });

            this.activeEffects.person = this.activeEffects.person.filter((effect) => {
                effect.duration -= 1;
                if (effect.type === EFFECT_TYPES.STUN && effect.duration <= 0) {
                    this.isPersonStunned = false;
                }
                return effect.duration > 0;
            });
        },

        // Боевая последовательность
        async playBattleSequence() {
            if (this.speed("person") >= this.speed("mob")) {
                await this.characterAttack();
                if (this.baseStats.mob.currentHp > 0) {
                    await this.mobAttack();
                }
            } else {
                await this.mobAttack();
                if (this.baseStats.person.currentHp > 0) {
                    await this.characterAttack();
                }
            }
        },

        // Вспомогательная функция для проверки критического удара
        isCriticalHit(target: "person" | "mob"): boolean {
            const criticalChance = this.criticalDmg(target);
            const roll = Math.random() * 100;
            return roll <= criticalChance;
        },

        // Атака персонажа
        async characterAttack() {
            if (this.isPersonStunned) {
                this.addToLog("Персонаж оглушен и пропускает ход!");
                this.showActionText("person", "Оглушен!", "dmg");
                return;
            }

            const hitRoll = Math.random() * 100;
            if (hitRoll > this.hitChance("person") - this.dodge("mob")) {
                this.addToLog("Персонаж промахнулся!");
                this.showActionText("person", "Промах!", "miss");
                return;
            }

            const isCritical = this.isCriticalHit("person");
            let damage = Math.max(1, this.physicalDmg("person") - this.physicalDef("mob"));
            const criticalMultiplier = 2;
            if (isCritical) {
                damage *= criticalMultiplier;
                this.addToLog(`Критический удар! Персонаж наносит ${damage} урона!`);
                this.showActionText("mob", `-${damage} (КРИТ!)`, "dmg-critical");
            } else {
                this.addToLog(`Персонаж атакует и наносит ${damage} урона!`);
                this.showActionText("mob", `-${damage}`, "dmg");
            }
            this.baseStats.mob.currentHp = Math.max(0, this.baseStats.mob.currentHp - damage);

            this.choices.forEach((choice) => {
                if (!choice) return;
                if (choice.bonus.debuff) {
                    const debuff = choice.bonus.debuff as { [key: string]: any };
                    if (debuff.burn) {
                        const burn = debuff.burn as { value: number; duration: number };
                        this.addEffect("mob", {
                            type: EFFECT_TYPES.BURN,
                            duration: burn.duration,
                            val: burn.value,
                            sourceCard: choice.name,
                            icon: choice.icon,
                        });
                        this.addToLog(`Моб горит (${burn.value} урона за ход)`);
                    }
                    if (debuff.freeze) {
                        this.addEffect("mob", {
                            type: EFFECT_TYPES.FREEZE,
                            duration: (debuff.freeze as { duration: number }).duration,
                            val: 0,
                            sourceCard: choice.name,
                            icon: choice.icon,
                        });
                        this.isMobFrozen = true;
                        this.addToLog("Моб заморожен!");
                    }
                    if (debuff.stun) {
                        this.addEffect("mob", {
                            type: EFFECT_TYPES.STUN,
                            duration: (debuff.stun as { duration: number }).duration || 1,
                            val: 0,
                            sourceCard: choice.name,
                            icon: choice.icon,
                        });
                        this.isMobStunned = true;
                        this.addToLog("Моб оглушен!");
                    }
                }
                if (choice.bonus.aoe) {
                    this.addToLog("Атака по площади! (AOE эффект пока не реализован для мобов)");
                }
            });

            this.playAnimationSequence(isCritical ? "game__person--special" : "game__person--attack2", "game__mob--hurt", damage);
            await new Promise(resolve => setTimeout(resolve, 2000));

            if (this.baseStats.mob.currentHp <= 0) {
                this.addToLog("Моб побежден!");
                this.showActionText("mob", "Побежден!", "death");
                await this.playDeathAnimation("mob");
            }
        },

        // Атака моба
        async mobAttack() {
            if (this.isMobFrozen || this.isMobStunned) {
                this.addToLog(`Моб ${this.isMobFrozen ? "заморожен" : "оглушен"} и пропускает ход!`);
                this.showActionText("mob", `${this.isMobFrozen ? "Заморожен!" : "Оглушен!"}`, "dmg");
                return;
            }

            const hitRoll = Math.random() * 100;
            if (hitRoll > this.hitChance("mob") - this.dodge("person")) {
                this.addToLog("Моб промахнулся!");
                this.showActionText("mob", "Промах!", "miss");
                return;
            }

            const isImmune = this.cardBonuses.person.debuffImmune;
            if (isImmune) {
                this.addToLog("Моб атакует, но персонаж невосприимчив к урону!");
                this.showActionText("person", "Заблокировано!", "heal");
                return;
            }

            const isCritical = this.isCriticalHit("mob");
            let damage = Math.max(1, this.physicalDmg("mob") - this.physicalDef("person"));
            const criticalMultiplier = 2;
            if (isCritical) {
                damage *= criticalMultiplier;
                this.addToLog(`Критический удар! Моб наносит ${damage} урона!`);
                this.showActionText("person", `-${damage} (КРИТ!)`, "dmg-critical");
            } else {
                this.addToLog(`Моб атакует и наносит ${damage} урона!`);
                this.showActionText("person", `-${damage}`, "dmg");
            }
            this.baseStats.person.currentHp = Math.max(0, this.baseStats.person.currentHp - damage);

            this.playAnimationSequence(isCritical ? "game__mob--attack" : "game__mob--attack", "game__person--hurt", damage);
            await new Promise(resolve => setTimeout(resolve, 2000));

            if (this.baseStats.person.currentHp <= 0) {
                this.addToLog("Персонаж побежден!");
                this.showActionText("person", "Побежден!", "death");
                await this.playDeathAnimation("person");
            }
        },

        // Перетаскивание карт
        onDragStart(event: DragEvent, cardIndex: number) {
            if (this.selectedCards >= this.maxSelectedCards) return;
            if (this.useCardIndices.includes(cardIndex)) return;
            const card = this.levelCards[cardIndex];
            if (card.manaCost > this.baseStats.person.currentMp) return;
            if (event.dataTransfer) {
                event.dataTransfer.setData("text/plain", cardIndex.toString());
                event.dataTransfer.effectAllowed = "move";
            }
        },

        isInCombo(index: number) {
            return this.comboIndices.includes(index);
        },

        getComboType(index: number) {
            if ([0, 3, 6].includes(index)) return this.COMBO_TYPES.CRITICAL;
            if ([1, 4, 7].includes(index)) return this.COMBO_TYPES.HIT_CHANCE;
            if ([2, 5, 8].includes(index)) return this.COMBO_TYPES.ATTACK;
            return null;
        },

        // Сброс карты
        onDrop(event: DragEvent, choiceIndex: number) {
            event.preventDefault();
            if (this.selectedCards >= this.maxSelectedCards && !this.choices[choiceIndex]) return;

            const cardIndex = event.dataTransfer?.getData("text/plain");
            if (cardIndex === undefined || cardIndex === "") return;

            const parsedIndex = parseInt(cardIndex);
            if (isNaN(parsedIndex)) return;

            if (this.useCardIndices.includes(parsedIndex)) return;

            const card = this.levelCards[parsedIndex];
            if (card.manaCost > this.baseStats.person.currentMp) return;

            const previousCard = this.choices[choiceIndex];
            const hadCardBefore = !!this.choices[choiceIndex];

            this.choices[choiceIndex] = card;

            if (!hadCardBefore && this.choices[choiceIndex]) {
                this.selectedCards++;
                this.useCardIndices.push(parsedIndex);
                this.baseStats.person.currentMp -= card.manaCost;
            } else if (hadCardBefore && !this.choices[choiceIndex]) {
                this.selectedCards--;
                if (previousCard) {
                    this.baseStats.person.currentMp += previousCard.manaCost;
                }
            } else if (hadCardBefore && this.choices[choiceIndex]) {
                if (previousCard) {
                    this.baseStats.person.currentMp += previousCard.manaCost;
                }
                this.baseStats.person.currentMp -= card.manaCost;
            }

            if (hadCardBefore) {
                const prevIndex = this.useCardIndices.indexOf(parsedIndex);
                if (prevIndex !== -1) {
                    this.useCardIndices.splice(prevIndex, 1);
                }
            }
        },

        // Смена карт и ход
        async changeCards() {
            if (this.isAnimating) return;
            this.isAnimating = true;
            this.applyCardBonuses();
            this.processEffects();

            if (this.baseStats.mob.currentHp <= 0) {
                this.addToLog("Моб побежден от эффектов!");
                this.showActionText("mob", "Побежден!", "death");
                await this.playDeathAnimation("mob");
            } else {
                await this.playBattleSequence();
            }

            this.decreaseEffectDurations();

            this.showDice = true;
            setTimeout(() => {
                this.showDice = false;
                this.initCards();
                this.resetMessages();
                this.isAnimating = false;
            }, 1500);
        },

        resetMessages() {
            this.messages.person = { type: "", message: "" };
            this.messages.mob = { type: "", message: "" };
            this.messages.turnKey++;
        },

        showActionText(target: "person" | "mob", message: string, type: string = "") {
            this.messages[target] = { message, type };
        },

        addToLog(message: string) {
            this.battleLog.unshift(message);
        },

        playAnimationSequence(
            attackAnimation: string,
            hurtAnimation: string,
            damage: number,
        ): Promise<void> {
            return new Promise((resolve) => {
                const attacker = attackAnimation.includes("person")
                    ? document.querySelector(".game__person")
                    : document.querySelector(".game__mob");

                const defender = hurtAnimation.includes("person")
                    ? document.querySelector(".game__person")
                    : document.querySelector(".game__mob");

                if (attacker && defender) {
                    attacker.classList.remove(
                        attackAnimation.includes("person") ? "game__person--idle" : "game__mob--idle",
                    );
                    attacker.classList.add(attackAnimation);

                    defender.classList.remove(
                        hurtAnimation.includes("person") ? "game__person--idle" : "game__mob--idle",
                    );
                    defender.classList.add(hurtAnimation);

                    attacker.addEventListener(
                        "animationend",
                        () => {
                            attacker.classList.remove(attackAnimation);
                            attacker.classList.add(
                                attackAnimation.includes("person") ? "game__person--idle" : "game__mob--idle",
                            );

                            defender.classList.remove(hurtAnimation);
                            defender.classList.add(
                                hurtAnimation.includes("person") ? "game__person--idle" : "game__mob--idle",
                            );

                            resolve();
                        },
                        { once: true },
                    );
                } else {
                    resolve();
                }
            });
        },

        async playDeathAnimation(target: "person" | "mob"): Promise<void> {
            return new Promise((resolve) => {
                const element = document.querySelector(
                    target === "person" ? ".game__person" : ".game__mob",
                );

                if (element) {
                    element.classList.remove(
                        target === "person" ? "game__person--idle" : "game__mob--idle",
                    );
                    element.classList.add(
                        target === "person" ? "game__person--death" : "game__mob--death",
                    );

                    element.addEventListener(
                        "animationend",
                        () => {
                            resolve();
                        },
                        { once: true },
                    );
                } else {
                    resolve();
                }
            });
        },
    },
});
</script>

<template>
    <div class="game">
        <div class="game__container container">
            <div class="game__logs">
                <Char />
                <div class="game__battle-log">
                    <div class="game__battle-item" v-for="(log, index) in battleLog" :key="index">{{ log }}</div>
                </div>
            </div>
            <div class="game__buffs buffs">
                <div class="buffs__person">
                    <div class="buffs__buff" v-for="(effect, index) in activeEffects.person"
                         :key="'person-effect-' + index">
                        <nuxt-img class="buffs__image" :src="`/images/components/cards/${char.character.species}/${effect.icon}`" alt="Эффект" />
                        <span class="buffs__counter">{{ effect.duration }}</span>
                    </div>
                    HP: {{ baseStats.person.currentHp }}/{{ maxHp("person") }}
                    MP: {{ baseStats.person.currentMp }}/{{ maxMp("person") }}
                </div>
                <div class="buffs__mob">
                    <div class="buffs__buff" v-for="(effect, index) in activeEffects.mob" :key="'mob-effect-' + index">
                        <nuxt-img class="buffs__image" :src="`/images/components/cards/${char.character.species}/${effect.icon}`" alt="Эффект" />
                        <span class="buffs__counter">{{ effect.duration }}</span>
                    </div>
                    HP: {{ baseStats.mob.currentHp }}/{{ maxHp("mob") }}
                </div>
            </div>
            <div class="game__actions game-actions">
                <div
                    :key="'person-' + messages.turnKey"
                    :class="[
            messages.person.type === 'miss' ? 'game-actions__action--miss' : '',
            messages.person.type === 'dmg' ? 'game-actions__action--dmg' : '',
            messages.person.type === 'death' ? 'game-actions__action--death' : '',
            messages.person.type === 'heal' ? 'game-actions__action--heal' : '',
            messages.person.type === 'mana-restore' ? 'game-actions__action--mana' : '',
            'game-actions__action game-actions__person'
          ]"
                >
                    {{ messages.person.message }}
                </div>
                <div
                    :key="'mob-' + messages.turnKey"
                    :class="[
            messages.mob.type === 'miss' ? 'game-actions__action--miss-mob' : '',
            messages.mob.type === 'dmg' ? 'game-actions__action--dmg-mob' : '',
            messages.mob.type === 'death' ? 'game-actions__action--death-mob' : '',
            messages.mob.type === 'heal' ? 'game-actions__action--heal-mob' : '',
            'game-actions__action game-actions__person'
          ]"
                >
                    {{ messages.mob.message }}
                </div>
            </div>
            <div class="game__window">
                <div class="game__block game__block--person">
                    <div :class="`game__person game__person--${char.character.species} game__person--idle`"></div>
                </div>
                <div class="game__choices">
                    <div class="game__wrap">
                        <div
                            class="game__choice"
                            @dragover.prevent
                            @dragenter.prevent
                            @drop="onDrop($event, choiceIndex)"
                            v-for="(choice, choiceIndex) in choices"
                            :key="choiceIndex"
                            :class="{
            'game__choice--combo': isInCombo(choiceIndex),
            'game__choice--critical': isInCombo(choiceIndex) && getComboType(choiceIndex) === COMBO_TYPES.CRITICAL,
            'game__choice--hit': isInCombo(choiceIndex) && getComboType(choiceIndex) === COMBO_TYPES.HIT_CHANCE,
            'game__choice--attack': isInCombo(choiceIndex) && getComboType(choiceIndex) === COMBO_TYPES.ATTACK
        }"
                        >
                            <div v-if="choice" class="game__picture">
                                <div class="game__stats">+{{ choice.count }}</div>
                                <div class="game__wrapper">
                                    <nuxt-img :src="`/images/components/cards/${char.character.species}/${choice.icon}`" :alt="choice.name"
                                              class="game__icon" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="game__attacks">
                        <button class="game__attack button button--metal" @click="changeCards"
                                :disabled="isAttackDisabled">
                            Атака
                        </button>
                    </div>
                </div>
                <div class="game__block game__block--mobs">
                    <div class="game__mob game__mob--idle"></div>
                </div>
            </div>
        </div>
        <div class="game__buttons container">
            <div class="game__buttons-block">
                <div
                    :class="[
            card.rare ? `card-game--${card.rare}` : 'card-game--standard',
            useCardIndices.includes(index) ? 'card-game--used' : '',
            'game__card card-game button'
          ]"
                    v-for="(card, index) in levelCards"
                    :key="index"
                    draggable="true"
                    @dragstart="onDragStart($event, index)"
                >
                    <div class="card-game__picture">
                        <nuxt-img class="card-game__image" :src="`/images/components/cards/${char.character.species}/${card.icon}`" alt="Карта" />
                    </div>
                    <div class="card-game__name">{{ card.name }}</div>
                    <div class="card-game__type">{{ card.type }}</div>
                    <div class="card-game__description">{{ card.description }}</div>
                    <div class="card-game__mana">
                        <nuxt-icon class="card-game__icon-mana" name="stats/mana" />
                        {{ card.manaCost }}
                    </div>
                </div>
            </div>
            <div class="game__counts">
                Выбранные карточки {{ selectedCards }} / {{ maxSelectedCards }}
            </div>
        </div>
        <Dice v-if="showDice" />
    </div>
</template>

<style scoped lang="scss">
@use "assets/scss/pages/game/id/styles";
</style>

<script lang="ts">
import { api } from "~/api/api";

export default defineComponent({
    name: "Index",
    async setup() {
        const { baseURL } = useRuntimeConfig().public as any;
        const { data: rawProfs } = await useFetch(api.professions, {
            baseURL,
        }) as any;
        const { data: profs } = rawProfs.value as any;
        return {
            profs
        }
    }
})
</script>

<template>
    <div class="professions">
        <div class="professions__container container">
            <div class="professions__cards">
                <template v-for="prof in profs">
                    <ProfessionsCard :prof="prof.attributes" />
                </template>
            </div>
        </div>
    </div>
</template>

<style scoped lang="scss">
@use "assets/scss/pages/professions/styles";
</style>

<script lang="ts">
import { defineComponent } from "vue";

interface Character {
    value: string;
    name: string;
    stats: {
        attack: number;
        critical: number;
        hp: number;
        mp: number;
        hitChance: number;
        dodge: number;
        speed: number;
        defence: number;
    };
    description: string;
    professions: {
        name: string;
        short: string;
        lvl: number;
        description: string;
        exp: number;
        needExp: number;
    };
}

export default defineComponent({
    name: "Index",
    setup() {
        // @ts-ignore
        definePageMeta({
            layout: "selection",
        });
    },
    data: () => ({
        currentChoice: null as string | any,
        selectedSpecies: {
            value: "",
            name: "",
        },
        stats: {
            attack: 1,
            critical: 1,
            hp: 1,
            mp: 1,
            hitChance: 1,
            dodge: 1,
            speed: 1,
            defence: 1,
        },
        professions: {},
        errorMessage: "",
        characters: [
            {
                value: "ranger",
                name: "Рейнджер",
                stats: {
                    attack: 1,
                    critical: 2,
                    hp: 5,
                    mp: 5,
                    hitChance: 52,
                    dodge: 21,
                    speed: 2,
                    defence: 0,
                },
                description: "Рейнджер — неуловимый следопыт, чьи стрелы находят цель даже в кромешной тьме. Его дом — леса и\n" +
                    "                        равнины, где он сливается с природой, подобно тени. Соколиный глаз и лёгкий шаг позволяют ему\n" +
                    "                        наносить точечные удары, оставаясь незамеченным. Каждый выстрел — это вызов судьбе, а каждый\n" +
                    "                        промах — лишь повод для новой охоты.",
                professions: {
                    name: "cooking",
                    short: "Приготовление пищи",
                    lvl: 1,
                    description: "Приготовление пищи (бонусы к созданию блюд)",
                    exp: 0,
                    needExp: 10
                },
            },
            {
                value: "wrecker",
                name: "Крушитель",
                stats: {
                    attack: 3,
                    critical: 1,
                    hp: 8,
                    mp: 5,
                    hitChance: 50,
                    dodge: 20,
                    speed: 1,
                    defence: 3,
                },
                description: "Крушитель — несокрушимая гора, чей молот дробит скалы и врагов с равной лёгкостью. Его броня,\n" +
                    "                        выкованная в недрах вулканов, отражает любой удар, а сердце пылает яростью клана. Он стоит на\n" +
                    "                        передовой, принимая на себя главный удар, чтобы защитить союзников. Каждый бой для него —\n" +
                    "                        проверка стойкости.",
                professions: {
                    name: "blacksmith",
                    short: "Кузнец",
                    lvl: 1,
                    description: "Кузнец (бонусы к созданию брони)",
                    exp: 0,
                    needExp: 10
                },
            },
            {
                value: "arcanist",
                name: "Арканист",
                stats: {
                    attack: 3,
                    critical: 1,
                    hp: 6,
                    mp: 8,
                    hitChance: 50,
                    dodge: 20,
                    speed: 2,
                    defence: 1,
                },
                description: "Арканист — повелитель тайн, чьи заклинания сотканы из нитей эфира. Его разум — лабиринт знаний,\n" +
                    "                        а посох — проводник магической силы. Он манипулирует стихиями, замораживая врагов или испепеляя\n" +
                    "                        их одним движением руки. Но за каждым заклинанием стоит цена, которую он готов заплатить ради\n" +
                    "                        истины.",
                professions: {
                    name: "tailoring",
                    short: "Портняжное дело",
                    lvl: 1,
                    description: "Портняжное дело (бонусы к созданию ткани).",
                    exp: 0,
                    needExp: 10
                },
            },
            {
                value: "monk",
                name: "Монах",
                stats: {
                    attack: 1,
                    critical: 1,
                    hp: 6,
                    mp: 5,
                    hitChance: 50,
                    dodge: 21,
                    speed: 2,
                    defence: 2,
                },
                description: "Монах — воплощение гармонии, чья душа чиста, как горный родник. Его кулаки — оружие, закалённое\n" +
                    "                        годами тренировок, а разум — щит от соблазнов. Он движется с грацией ветра, уклоняясь от ударов\n" +
                    "                        и очищая мир от скверны. Для монаха бой — это путь к просветлению, а не к разрушению.",
                professions: {
                    name: "Alchemy",
                    short: "Алхимия",
                    lvl: 1,
                    description: "Алхимия (бонусы к созданию зелий).",
                    exp: 0,
                    needExp: 10
                },
            },
            {
                value: "inferno",
                name: "Инферно",
                stats: {
                    attack: 2,
                    critical: 2,
                    hp: 7,
                    mp: 6,
                    hitChance: 50,
                    dodge: 20,
                    speed: 2,
                    defence: 3,
                },
                description: "Инферно — пламя войны, чей меч горит жарче солнца. Его атаки подобны огненному шторму,\n" +
                    "                        оставляющему за собой лишь пепел. Доспехи, пропитанные магией вулканов, делают его неуязвимым\n" +
                    "                        для слабых. Он сражается не ради славы, а ради искры, что пылает в его душе.",
                professions: {
                    name: "gunsmith",
                    short: "Оружейник",
                    lvl: 1,
                    description: "Оружейник (бонусы к созданию оружия).",
                    exp: 0,
                    needExp: 10
                },
            },
            {
                value: "assassin",
                name: "Ассасин",
                stats: {
                    attack: 3,
                    critical: 5,
                    hp: 5,
                    mp: 5,
                    hitChance: 50,
                    dodge: 20,
                    speed: 2,
                    defence: 1,
                },
                description: "Ассасин — призрак ночи, чьи клинки шепчут о смерти. Он скользит в тенях, нанося смертельные\n" +
                    "                        удары, прежде чем враг успеет моргнуть. Его движения точны, как механизм часов, а глаза холодны,\n" +
                    "                        как сталь. Ассасин не знает пощады, но его сердце хранит тайну, которую никто не раскроет.",
                professions: {
                    name: "collector",
                    short: "Коллекционер",
                    lvl: 1,
                    description: "Коллекционер (бонусы к поиску редких ресурсов).",
                    exp: 0,
                    needExp: 10
                },
            },
        ] as Character[],
    }),
    methods: {
        onChoice(type: string): void {
            this.currentChoice = type;
        },
        // @ts-ignore
        onSelect(character: Character): void {
            this.selectedSpecies.value = character.value;
            this.selectedSpecies.name = character.name;
            this.stats = character.stats;
            this.professions = character.professions;
        },

        async onAccept(): Promise<any> {
            this.errorMessage = "";

            if (!this.selectedSpecies.value) {
                this.errorMessage = "Выберите персонажа";
                return;
            }

            try {
                const { data: userData, error: authError } = await this.$supabase.auth.getUser();

                if (authError || !userData.user) {
                    this.errorMessage = "Ошибка: пользователь не авторизован";
                    return;
                }

                const userId = userData.user.id;

                // Отправляем данные в таблицу characters
                const { error } = await this.$supabase.from("characters").upsert({
                    id: userId,
                    species: this.selectedSpecies.value,
                    species_name: this.selectedSpecies.name,
                    stats: this.stats,
                    game_stats: {
                        freeCount: 0,
                        currentExp: 0,
                        level: 1,
                        currentEnergy: 10,
                        maxEnergy: 10,
                    },
                    professions: [
                        this.professions
                    ]
                });

                if (error) {
                    this.errorMessage = `Ошибка сохранения персонажа: ${error.message}`;
                    console.error(error);
                    return;
                }

                // Обновляем юзера
                const { error: updateError } = await this.$supabase.auth.updateUser({
                    data: { isSelectedSpecies: true },
                });

                if (updateError) {
                    this.errorMessage = `Ошибка обновления пользователя: ${updateError.message}`;
                    console.error(updateError);
                    return;
                }

                let button = document.querySelector(".accept__button--close");
                if (button) {
                    // @ts-ignore
                    button.click();
                }
                this.$router.push("/town/");
            } catch (err) {
                this.errorMessage = "Неизвестная ошибка. Попробуйте позже.";
                console.error(err);
            }
        },
    },
    async mounted() {
        const { data: userData, error: authError } = await this.$supabase.auth.getUser();
        if (authError || !userData.user) {
            this.errorMessage = "Ошибка: пользователь не авторизован";
            this.$router.push("/");
            return;
        }
        if (userData.user.user_metadata.isSelectedSpecies) {
            // this.$router.push("/town/");
        }
    },
});
</script>

<template>
    <div class="selections">
        <div class="selections__container container">
            <h1 class="selections__title">Выбор персонажа</h1>
            <div class="selections__wrap">
                <div class="selections__cards">
                    <button
                        v-for="char in characters"
                        :key="char.value"
                        :class="[
              currentChoice === char.value ? 'selections__card--active' : '',
              'selections__card'
            ]"
                        type="button"
                        @click="onChoice(char.value)"
                    >
                        <div class="selections__picture">
                            <nuxt-img
                                class="selections__image"
                                :src="`images/sprites/persons/${char.value}/icon-${char.value}.png`"
                                :alt="`Иконка ${char.name}`"
                            />
                        </div>
                        <div class="selections__type">{{ char.name }}</div>
                    </button>
                </div>

                <div class="selections__person animate">
                    <div
                        v-if="currentChoice"
                        :class="`selections__animate animate__${currentChoice} animate__idle`"
                    ></div>
                </div>

                <div class="selections__info" v-if="currentChoice">
                    <div class="selections__stats">
                        <h2 class="selections__subtitle">Характеристики</h2>
                        <ul class="selections__list list">
                            <li class="selections__item"
                                v-for="(value, stat) in characters.find(c => c.value === currentChoice)?.stats"
                                :key="stat">
                                <div class="selections__name">{{ {
                                    hp: "Здоровье",
                                    mp: "Мана",
                                    attack: "Атака",
                                    critical: "Критический шанс",
                                    hitChance: "Меткость",
                                    dodge: "Шанс уворота",
                                    speed: "Скорость",
                                    defence: "Защита",
                                }[stat] }}
                                </div>
                                <div class="selections__value">{{ value }}{{stat === "critical" || stat === "hitChance" || stat === "dodge" ? "%" : ""}}</div>
                            </li>
                        </ul>
                    </div>

                    <h2 class="selections__subtitle">Описание</h2>
                    <div class="selections__description">
                        {{ characters.find(c => c.value === currentChoice)?.description }}
                    </div>

                    <div class="selections__professions">
                        <h2 class="selections__subtitle">Улучшения</h2>
                        <div class="selections__items">
                            <div class="selections__item-name"><strong>Склонность:</strong></div>
                            <div class="selections__item-val">
                                {{ characters.find(c => c.value === currentChoice)?.professions?.description }}
                            </div>
                        </div>
                    </div>

                    <div class="selections__buttons">
                        <button class="selections__button button--metal"
                                data-bs-toggle="modal"
                                data-bs-target="#accept-species"
                                type="button"
                                @click="onSelect(
                                    //@ts-ignore
                                    characters.find(c => c.value === currentChoice)
                                    )"
                        >
                            Подтвердить
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <Modal size="sm" id="accept-species">
        <div class="accept">
            <h2 class="accept__title h3">Вы выбрали расу: {{ selectedSpecies.name }}</h2>
            <div class="accept__buttons">
                <button class="accept__button button button--metal" type="button" @click="onAccept">Подтвердить</button>
                <button
                    class="accept__button accept__button--close button button--metal"
                    type="button"
                    data-bs-dismiss="modal"
                >
                    Отменить
                </button>
            </div>
        </div>
    </Modal>
</template>

<style scoped lang="scss">
@use "assets/scss/pages/selections/styles";
</style>
<script lang="ts">
import { defineComponent } from "vue";
import Professions from "~/components/professions/professions.vue";

export default defineComponent({
    name: "Index",
    components: { Professions },
    // setup() {
    //     const char = usePersonState();
    //     return {
    //         char
    //     }
    // },
    data: () => ({
        errorMessage: "",
        species: "",
        char: usePersonState()
    }),
    methods: {
        async fetchCharacter() {
            try {
                // Получаем текущего пользователя
                const { data: userData, error: authError } = await this.$supabase.auth.getUser();

                if (authError || !userData.user) {
                    this.$router.push("/");
                    return;
                }

                const userId = userData.user.id;

                // Запрашиваем данные персонажа из таблицы characters
                const { data, error } = await this.$supabase
                    .from("characters")
                    .select("*")
                    .eq("id", userId)
                    .single();

                if (error) {
                    this.errorMessage = `Ошибка загрузки персонажа: ${error.message}`;
                    console.error(error);
                    return;
                }

                if (data) {
                    this.char.setCharacter(data);
                    this.species = data.species;
                    console.log(this.char);
                }
            } catch (err) {
                this.errorMessage = "Неизвестная ошибка. Попробуйте позже.";
                console.error(err);
            }
        },
    },
    async created() {
        await this.fetchCharacter();
    }
});
</script>

<template>
    <div class="town" v-cloak>
        <div class="town__container container">
            <Char />
            <div :class="`town__person town__person--${species ? species : char.character.species} town__person--idle`"></div>
            <ul class="town__items list">
                <li class="town__item">
                    <nuxt-link class="town__link link link--white" to="/game/1" title="Отправиться в путешествие">
                        <nuxt-img class="town__image" src="/images/pages/town/battle.png" alt="Изображение Путешествий"/>
                    </nuxt-link>
                </li>
                <li class="town__item">
                    <button class="town__link link link--white" type="button" data-bs-toggle="modal"
                            data-bs-target="#achievements" title="Достижения">
                        <nuxt-img class="town__image" src="/images/pages/town/achiev.png" alt="Изображение Достижения"/>
                    </button>
                </li>
                <li class="town__item town__item--craft">
                    <button class="town__link link link--white" type="button" data-bs-toggle="modal"
                            data-bs-target="#professions" title="Ремесло">
                        <nuxt-img class="town__image" src="/images/pages/town/proffesions.png" alt="Изображение Ремесла"/>
                    </button>
                </li>
                <li class="town__item">
                    <button class="town__link link link--white" type="button" data-bs-toggle="modal"
                            data-bs-target="#craft" title="Крафт">
                        <nuxt-img class="town__image" src="/images/pages/town/craft.png" alt="Изображение Крафта"/>
                    </button>
                </li>
                <li class="town__item">
                    <button class="town__link link link--white" type="button" data-bs-toggle="modal"
                            data-bs-target="#beasts" title="Бестиарий">
                        <nuxt-img class="town__image" src="/images/pages/town/beasts.png" alt="Изображение Бестиария"/>
                    </button>
                </li>
                <li class="town__item">
                    <button class="town__link link link--white" type="button" data-bs-toggle="modal"
                            data-bs-target="#talants" title="Таланты">
                        <nuxt-img class="town__image" src="/images/pages/town/talants.png" alt="Изображение Талантов"/>
                    </button>
                </li>
                <li class="town__item">
                    <button class="town__link link link--white" type="button" data-bs-toggle="modal"
                            data-bs-target="#shop" title="Магазин">
                        <nuxt-img class="town__image" src="/images/pages/town/shop.png" alt="Изображение Достижений"/>
                    </button>
                </li>
            </ul>
        </div>
        <Modal size="lg" id="achievements">
            <LazyAchievements/>
        </Modal>
        <Modal size="lg" id="professions">
            <Professions />
        </Modal>
        <Modal size="lg" id="craft">
            <LazyCraft/>
        </Modal>
        <Modal size="lg" id="beasts">
            <LazyBeasts/>
        </Modal>
        <Modal size="lg" id="talants">
            <LazyCards />
        </Modal>
        <Modal size="lg" id="shop">
            <div>
                Магазин
            </div>
        </Modal>
    </div>
</template>

<style scoped lang="scss">
@use "assets/scss/pages/town/styles";
</style>
<script lang="ts">

export default defineComponent({
    name: "Index",
    async setup() {
        definePageMeta({
            layout: "start",
        });
    },
    data: () => ({
        isVisibleButtons: false,
        loggedIn: false,
        isSpecies: false
    }),
    methods: {
        checkAuth() {
            this.loggedIn = !!usePersonState().username;
        }
    },
    mounted() {
        this.checkAuth();
        setTimeout(() => {
            this.isVisibleButtons = true;
        }, 3500)
    }
});
</script>

<template>
    <div class="start">
        <div class="start__container container">
            <DynamicTitle/>
            <div class="start__buttons" v-if="loggedIn && isVisibleButtons">
                <nuxt-link v-if="!isSpecies" to="/selections/" class="start__button animated-button6">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Начать игру
                </nuxt-link>
                <nuxt-link v-else to="/town/" class="start__button animated-button6">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Продолжить игру
                </nuxt-link>
            </div>
            <div class="start__buttons" v-if="!loggedIn && isVisibleButtons">
                <button type="button" class="start__button animated-button7" data-bs-toggle="modal"
                        data-bs-target="#registration">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Зарегистрироваться
                </button>
                <button type="button" class="start__button animated-button6" data-bs-toggle="modal"
                        data-bs-target="#auth">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    Войти
                </button>
            </div>
        </div>
    </div>
    <Modal size="sm" id="auth">
        <Auth/>
    </Modal>
    <Modal size="sm" id="registration">
        <Registration/>
    </Modal>
</template>

<style lang="scss" scoped>
@use "assets/scss/pages/index/styles";
</style>
<script lang="ts">
import { defineComponent } from "vue";

export default defineComponent({
    name: "Achievements",
    setup() {
        const achievements = [
            {
                id: 1,
                name: "Первое достижение",
                description: "Вы вошли в игру",
                need: "Первый раз зайти в игру",
                reward: {
                    type: "freeCount", // freeCount, stats, recipes, combo
                    value: 1,
                    name: "Очки прокачки",
                    id: "",
                },
            },
            {
                id: 2,
                name: "Второе достижение",
                description: "Вы достигли 5 уровня",
                need: "Уровень больше или равен 5",
                reward: {
                    type: "recipes", // freeCount, stats, recipes, combo
                    value: 1,
                    name: "Рецепт маны ур. 1",
                    id: "recipe-mp-1",
                },
            },
        ];
        return {
            achievements,
        };
    },
    data: () => ({
        typeMap: new Map([
            ["recipes", "Рецепт"],
            ["freeCount", "Очки навыков"],
            ["combo", "Дополнительные улучшения"],
            ["stats", "Характеристики"],
        ]),
    }),
    methods: {
        computeTypeMap(type: string) {
            return this.typeMap.get(type);
        },
    },
});
</script>

<template>
    <div class="achievements">
        <h2 class="achievements__title">Достижения</h2>
        <div class="achievements__items">
            <div class="achievements__item" v-for="(item, index) in achievements" :key="index">
                <div class="achievements__name">{{ item.name }}</div>
                <div class="achievements__description">{{ item.description }}</div>
                <div class="achievements__rewards">
                    <div class="achievements__reward">Награда</div>
                    <div class="achievements__values">
                        <div class="achievements__type">{{ computeTypeMap(item.reward.type) }}</div>
                        <div class="achievements__block">
                            <div class="achievements__type">{{ item.reward.name }}</div>
                            <div class="achievements__value">x{{ item.reward.value }}</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<style scoped lang="scss">
@use "achievements";
</style>
<script lang="ts">
import { defineComponent } from "vue";
import { usePersonState } from "~/stores/person";

// Карты для всех классов
const cardsByClass = {
    ranger: [
        {
            id: "ranger-Sniper-shot",
            name: "Снайперский выстрел",
            type: "attack",
            rare: "rare",
            description: "Наносит 3 урона, +100% шанс попадания на 1 ход",
            icon: "ranger-sniper-shot.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 3, buff: { hitChance: true, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1, buff: { hitChance: true, duration: 0.2 } },
        },
        {
            id: "ranger-Hunter's-mark",
            name: "Метка охотника",
            type: "buff",
            rare: "rare",
            description: "Накладывает кровотечение (2 урона за ход, 3 хода)",
            icon: "ranger-hunters-mark.png",
            manaCost: 3,
            count: 1,
            bonus: { debuff: { bleed: { value: 2, duration: 3 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { bleed: { value: 1, duration: 0.3 } } },
        },
        {
            id: "ranger-Rapid-fire",
            name: "Быстрая стрельба",
            type: "attack",
            rare: "rare",
            description: "Наносит 5 урона, накладывает яд (2 урона за ход, 3 хода)",
            icon: "ranger-rapid-fire.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 5, debuff: { poison: { value: 2, duration: 3 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1, debuff: { poison: { value: 0.5, duration: 0.3 } } },
        },
        {
            id: "ranger-Hunting-trap",
            name: "Охотничья ловушка",
            type: "control",
            rare: "rare",
            description: "Замедляет врага (-5 скорости на 2 хода)",
            icon: "ranger-hunting-trap.png",
            manaCost: 1,
            count: 1,
            bonus: { debuff: { speed: -5, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { speed: -0.5, duration: 0.2 } },
        },
        {
            id: "ranger-Explosive-shot",
            name: "Взрывной выстрел",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 урона, +5 уклонения на 2 хода",
            icon: "ranger-explosive-shot.png",
            manaCost: 2,
            count: 1,
            bonus: { attack: 2, buff: { dodge: 5, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5, buff: { dodge: 1, duration: 0.2 } },
        },
        {
            id: "ranger-Aimed-shot",
            name: "Меткий выстрел",
            type: "attack",
            rare: "common",
            description: "Наносит 2 урона, +10 меткости на 2 хода",
            icon: "ranger-aimed-shot.png",
            manaCost: 2,
            count: 2,
            bonus: { attack: 2, buff: { hitChance: 10, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 3,
            upgradeEffect: { attack: 0.5, buff: { hitChance: 1, duration: 0.2 } },
        },
        {
            id: "ranger-Healing-salve",
            name: "Целебный бальзам",
            type: "heal",
            rare: "common",
            description: "Восстанавливает 3 HP",
            icon: "ranger-healing-salve.png",
            manaCost: 2,
            count: 1,
            bonus: { hp: 3 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 3,
            upgradeEffect: { hp: 1 },
        },
        {
            id: "ranger-Camouflage",
            name: "Камуфляж",
            type: "defense",
            rare: "rare",
            description: "+30 уклонения на 2 хода",
            icon: "ranger-camouflage.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { dodge: 30, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { dodge: 2, duration: 0.2 } },
        },
        {
            id: "ranger-Hunter's-sense",
            name: "Чувство охотника",
            type: "buff",
            rare: "epic",
            description: "+5 урона, +10% шанс критического удара на 1 ход",
            icon: "ranger-hunters-sense.png",
            manaCost: 4,
            count: 1,
            bonus: { buff: { attack: 5, critical: 10, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 7,
            upgradeEffect: { buff: { attack: 1, critical: 2, duration: 0.2 } },
        },
    ],
    wrecker: [
        {
            id: "wrecker-Smash",
            name: "Сокрушение",
            type: "attack",
            rare: "rare",
            description: "Наносит 3 урона, игнорирует 50% защиты на 2 хода",
            icon: "wrecker-smash.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 3, buff: { ignoreDefense: 50, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1, buff: { ignoreDefense: 2, duration: 0.2 } },
        },
        {
            id: "wrecker-Diamond-shield",
            name: "Алмазный щит",
            type: "defense",
            rare: "rare",
            description: "+2 защиты, +1 урона на 2 хода",
            icon: "wrecker-diamond-shield.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { defence: 2, attack: 1, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { defence: 1, attack: 0.5, duration: 0.2 } },
        },
        {
            id: "wrecker-Shock-wave",
            name: "Ударная волна",
            type: "control",
            rare: "rare",
            description: "Оглушает на 1 ход, -20% защиты на 2 хода",
            icon: "wrecker-shock-wave.png",
            manaCost: 3,
            count: 1,
            bonus: { debuff: { stun: true, ignoreDefense: 20, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { stun: true, ignoreDefense: 2, duration: 0.2 } },
        },
        {
            id: "wrecker-Surge-of-strength",
            name: "Прилив сил",
            type: "heal",
            rare: "rare",
            description: "Восстанавливает 4 HP",
            icon: "wrecker-surge-of-strength.png",
            manaCost: 2,
            count: 4,
            bonus: { hp: 4 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { hp: 1 },
        },
        {
            id: "wrecker-Crystal-infusion",
            name: "Кристальная инфузия",
            type: "buff",
            rare: "rare",
            description: "+4 урона, невосприимчивость к дебаффам на 3 хода",
            icon: "wrecker-crystal-infusion.png",
            manaCost: 5,
            count: 1,
            bonus: { buff: { attack: 4, debuffImmune: true, duration: 3 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { attack: 1, debuffImmune: true, duration: 0.3 } },
        },
        {
            id: "wrecker-Farcical-blow",
            name: "Фарсированный удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 3 урона",
            icon: "wrecker-farcical-blow.png",
            manaCost: 2,
            count: 1,
            bonus: { attack: 3 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1 },
        },
        {
            id: "wrecker-Crystallization",
            name: "Кристаллизация",
            type: "defense",
            rare: "rare",
            description: "+10 защиты на 1 ход",
            icon: "wrecker-crystallization.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { defence: 10, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { defence: 2, duration: 0.2 } },
        },
        {
            id: "wrecker-Jeweler's-precision",
            name: "Точность ювелира",
            type: "buff",
            rare: "rare",
            description: "+100% меткости на 2 хода",
            icon: "wrecker-jewelers-precision.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { hitChance: true, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { hitChance: true, duration: 0.3 } },
        },
        {
            id: "wrecker-Powerful-blow",
            name: "Мощный удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 урона, +1 урона на 1 ход",
            icon: "wrecker-powerful-blow.png",
            manaCost: 2,
            count: 1,
            bonus: { attack: 2, buff: { attack: 1, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1, buff: { attack: 0.5, duration: 0.2 } },
        },
    ],
    arcanist: [
        {
            id: "arcanist-Fireball",
            name: "Огненный шар",
            type: "attack",
            rare: "rare",
            description: "Наносит 3 магического урона",
            icon: "arcanist-fireball.png",
            manaCost: 5,
            count: 1,
            bonus: { attack: 3 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1 },
        },
        {
            id: "arcanist-Frost-arrow",
            name: "Ледяная стрела",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 магического урона, замораживает на 1 ход",
            icon: "arcanist-frost-arrow.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 2, debuff: { freeze: { duration: 1 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5, debuff: { freeze: { duration: 0.2 } } },
        },
        {
            id: "arcanist-Magical-flash",
            name: "Магическая вспышка",
            type: "attack",
            rare: "rare",
            description: "Наносит 1 магического урона, замораживает на 1 ход",
            icon: "arcanist-magical-flash.png",
            manaCost: 1,
            count: 1,
            bonus: { attack: 1, debuff: { freeze: { duration: 1 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.3, debuff: { freeze: { duration: 0.2 } } },
        },
        {
            id: "arcanist-Frost-barrier",
            name: "Ледяной барьер",
            type: "defense",
            rare: "rare",
            description: "+4 защиты, замораживает врагов на 1 ход при защите",
            icon: "arcanist-frost-barrier.png",
            manaCost: 4,
            count: 1,
            bonus: { buff: { defence: 4, duration: 1 }, debuff: { freeze: { duration: 1 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { defence: 1, duration: 0.2 }, debuff: { freeze: { duration: 0.2 } } },
        },
        {
            id: "arcanist-Magic-trick",
            name: "Магическая уловка",
            type: "utility",
            rare: "rare",
            description: "Восстанавливает 5 маны на 3 хода",
            icon: "arcanist-magic-trick.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { mp: 5, duration: 3 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { mp: 1, duration: 0.3 } },
        },
        {
            id: "arcanist-Surge-of-power",
            name: "Прилив сил",
            type: "heal",
            rare: "rare",
            description: "Восстанавливает 4 HP и 4 маны",
            icon: "arcanist-surge-of-power.png",
            manaCost: 2,
            count: 1,
            bonus: { hp: 4, buff: { mp: 4 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { hp: 1, buff: { mp: 1 } },
        },
        {
            id: "arcanist-Rings-of-cold",
            name: "Кольца холода",
            type: "control",
            rare: "rare",
            description: "Замораживает врагов на 2 хода",
            icon: "arcanist-rings-of-cold.png",
            manaCost: 3,
            count: 1,
            bonus: { debuff: { freeze: { duration: 2 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { freeze: { duration: 0.3 } } },
        },
        {
            id: "arcanist-True-trinity",
            name: "Истинное тринити",
            type: "attack",
            rare: "epic",
            description: "Наносит 5 магического урона, накладывает горение (2 урона за ход, 3 хода), замораживает на 1 ход",
            icon: "arcanist-true-trinity.png",
            manaCost: 7,
            count: 1,
            bonus: { attack: 5, debuff: { burn: { value: 2, duration: 3 }, freeze: { duration: 1 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 7,
            upgradeEffect: { attack: 1, debuff: { burn: { value: 0.5, duration: 0.3 }, freeze: { duration: 0.2 } } },
        },
        {
            id: "arcanist-Hidden-knowledge",
            name: "Скрытые знания",
            type: "buff",
            rare: "rare",
            description: "+5 магического урона на 2 хода",
            icon: "arcanist-hidden-knowledge.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { attack: 5, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { attack: 1, duration: 0.3 } },
        },
        {
            id: "arcanist-Magic-shield",
            name: "Магический щит",
            type: "defense",
            rare: "common",
            description: "+3 защиты на 2 хода",
            icon: "arcanist-magic-shield.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { defence: 3, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 3,
            upgradeEffect: { buff: { defence: 1, duration: 0.2 } },
        },
        {
            id: "arcanist-Lightning",
            name: "Молния",
            type: "attack",
            rare: "rare",
            description: "Наносит 3 магического урона",
            icon: "arcanist-lightning.png",
            manaCost: 4,
            count: 1,
            bonus: { attack: 3 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1 },
        },
        {
            id: "arcanist-magic-explosion",
            name: "Магический взрыв",
            type: "attack",
            rare: "epic",
            description: "Наносит 2 магического урона всем врагам",
            icon: "arcanist-magic-explosion.png",
            manaCost: 6,
            count: 1,
            bonus: { attack: 2, aoe: true },
            level: 1,
            maxLevel: 10,
            upgradeCost: 7,
            upgradeEffect: { attack: 0.5 },
        },
        {
            id: "arcanist-Mana-restore",
            name: "Восстановление маны",
            type: "buff",
            rare: "common",
            description: "Восстанавливает 5 маны",
            icon: "arcanist-mana-restore.png",
            manaCost: 0,
            count: 1,
            bonus: { buff: { mp: 5 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 3,
            upgradeEffect: { buff: { mp: 1 } },
        },
        {
            id: "arcanist-Ice-barrier",
            name: "Ледяной барьер",
            type: "defense",
            rare: "rare",
            description: "+2 защиты на 2 хода",
            icon: "arcanist-ice-barrier.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { defence: 2, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { defence: 1, duration: 0.2 } },
        },
        {
            id: "arcanist-Fire-arrow",
            name: "Огненная стрела",
            type: "attack",
            rare: "common",
            description: "Наносит 2 магического урона",
            icon: "arcanist-fire-arrow.png",
            manaCost: 2,
            count: 1,
            bonus: { attack: 2 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 3,
            upgradeEffect: { attack: 0.5 },
        },
        {
            id: "arcanist-Magic-aura",
            name: "Магическая аура",
            type: "buff",
            rare: "rare",
            description: "+2 магического урона на 2 хода",
            icon: "arcanist-magic-aura.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { attack: 2, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { attack: 0.5, duration: 0.2 } },
        },
        {
            id: "arcanist-Freeze",
            name: "Заморозка",
            type: "control",
            rare: "rare",
            description: "Замораживает врага на 1 ход",
            icon: "arcanist-freeze.png",
            manaCost: 3,
            count: 1,
            bonus: { debuff: { freeze: { duration: 1 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { freeze: { duration: 0.3 } } },
        },
    ],
    monk: [
        {
            id: "monk-Meditation",
            name: "Медитация",
            type: "buff",
            rare: "rare",
            description: "+3 защиты, +3 урона на 3 хода",
            icon: "monk-meditation.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { defence: 3, attack: 3, duration: 3 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { defence: 1, attack: 1, duration: 0.3 } },
        },
        {
            id: "monk-spiritual-strike",
            name: "Духовный удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 урона, +20% шанс критического удара",
            icon: "monk-spiritual-strike.png",
            manaCost: 5,
            count: 1,
            bonus: { attack: 2, buff: { critical: 20 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1, buff: { critical: 2 } },
        },
        {
            id: "monk-Tiger-strike",
            name: "Удар тигра",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 урона, +2 урона на 2 хода",
            icon: "monk-tiger-strike.png",
            manaCost: 2,
            count: 1,
            bonus: { attack: 2, buff: { attack: 2, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5, buff: { attack: 0.5, duration: 0.2 } },
        },
        {
            id: "monk-Dragon-strike",
            name: "Удар дракона",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 урона, накладывает горение (2 урона за ход, 2 хода)",
            icon: "monk-dragon-strike.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 2, debuff: { burn: { value: 2, duration: 2 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5, debuff: { burn: { value: 0.5, duration: 0.2 } } },
        },
        {
            id: "monk-Stone-armor",
            name: "Каменный доспех",
            type: "defense",
            rare: "rare",
            description: "Блокирует атаку на 1 ход",
            icon: "monk-stone-armor.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { immune: true, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { immune: true, duration: 0.2 } },
        },
        {
            id: "monk-Balance",
            name: "Равновесие",
            type: "heal",
            rare: "rare",
            description: "Исцеляет 1 HP в течение 4 ходов",
            icon: "monk-balance.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { hp: 1, duration: 4 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { hp: 0.5, duration: 0.4 } },
        },
        {
            id: "monk-Path-of-goodness",
            name: "Путь добра",
            type: "heal",
            rare: "epic",
            description: "Исцеляет 100% HP, блокирует исцеление на 7 ходов",
            icon: "monk-path-of-goodness.png",
            manaCost: 4,
            count: 1,
            bonus: { hp: 20, debuff: { healBlock: true, duration: 7 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 7,
            upgradeEffect: { debuff: { healBlock: true, duration: -0.7 } },
        },
        {
            id: "monk-Path-of-hate",
            name: "Путь ненависти",
            type: "buff",
            rare: "epic",
            description: "+4 урона на 7 ходов, блокирует исцеление",
            icon: "monk-path-of-hate.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { attack: 4, duration: 7 }, debuff: { healBlock: true, duration: 7 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 7,
            upgradeEffect: { buff: { attack: 1, duration: -0.5 }, debuff: { healBlock: true, duration: -0.5 } },
        },
        {
            id: "monk-Strike-of-the-rising-sun",
            name: "Удар восходящего солнца",
            type: "attack",
            rare: "rare",
            description: "Наносит 1 урон, восстанавливает 2 маны на 2 хода",
            icon: "monk-strike-of-the-rising-sun.png",
            manaCost: 1,
            count: 1,
            bonus: { attack: 1, buff: { mp: 2, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.3, buff: { mp: 0.5, duration: 0.2 } },
        },
    ],
    inferno: [
        {
            id: "inferno-Hell-explosion",
            name: "Адский взрыв",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 магического урона",
            icon: "inferno-hell-explosion.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 2 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5 },
        },
        {
            id: "inferno-Flame-shield",
            name: "Огненный щит",
            type: "defense",
            rare: "rare",
            description: "+3 защиты на 2 хода, накладывает горение (1 урона за ход, 2 хода)",
            icon: "inferno-flame-shield.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { defence: 3, duration: 2 }, debuff: { burn: { value: 1, duration: 2 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { defence: 1, duration: 0.2 }, debuff: { burn: { value: 0.3, duration: 0.2 } } },
        },
        {
            id: "inferno-Wrath-of-Inferno",
            name: "Гнев инферно",
            type: "buff",
            rare: "epic",
            description: "+3 магического урона на 6 ходов",
            icon: "inferno-wrath-of-Inferno.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { attack: 3, duration: 6 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 7,
            upgradeEffect: { buff: { attack: 1, duration: 0.4 } },
        },
        {
            id: "inferno-Eternal-flame",
            name: "Вечное пламя",
            type: "attack",
            rare: "rare",
            description: "Накладывает горение (2 урона за ход, 5 ходов)",
            icon: "inferno-eternal-flame.png",
            manaCost: 5,
            count: 1,
            bonus: { debuff: { burn: { value: 2, duration: 5 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { burn: { value: 0.5, duration: 0.5 } } },
        },
        {
            id: "inferno-Live-bomb",
            name: "Живая бомба",
            type: "attack",
            rare: "rare",
            description: "Наносит 3 магического урона, +2 урона на 1 ход",
            icon: "inferno-live-bomb.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 3, buff: { attack: 2, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1, buff: { attack: 0.5, duration: 0.2 } },
        },
        {
            id: "inferno-Holy-flame",
            name: "Святое пламя",
            type: "heal",
            rare: "rare",
            description: "Исцеляет на 5 HP",
            icon: "inferno-holy-flame.png",
            manaCost: 5,
            count: 1,
            bonus: { hp: 5 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { hp: 1 },
        },
        {
            id: "inferno-Small-flame",
            name: "Малое пламя",
            type: "attack",
            rare: "common",
            description: "Наносит 1 магического урона, накладывает горение (2 урона за ход, 2 хода)",
            icon: "inferno-small-flame.png",
            manaCost: 1,
            count: 1,
            bonus: { attack: 1, debuff: { burn: { value: 2, duration: 2 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 3,
            upgradeEffect: { attack: 0.3, debuff: { burn: { value: 0.5, duration: 0.2 } } },
        },
        {
            id: "inferno-Flame-control",
            name: "Контроль пламени",
            type: "control",
            rare: "rare",
            description: "Оглушает на 1 ход",
            icon: "inferno-flame-control.png",
            manaCost: 1,
            count: 1,
            bonus: { debuff: { stun: true, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { stun: true, duration: 0.2 } },
        },
        {
            id: "inferno-Blade-of-flame",
            name: "Клинок пламени",
            type: "buff",
            rare: "rare",
            description: "+2 магического урона на 2 хода",
            icon: "inferno-blade-of-flame.png",
            manaCost: 1,
            count: 1,
            bonus: { buff: { attack: 2, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { attack: 0.5, duration: 0.2 } },
        },
    ],
    assassin: [
        {
            id: "assassin-Fatal-strike",
            name: "Смертельный удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 1 урон, +10% шанс критического удара на 3 хода",
            icon: "assassin-fatal-strike.png",
            manaCost: 5,
            count: 1,
            bonus: { attack: 1, buff: { critical: 10, duration: 3 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5, buff: { critical: 2, duration: 0.3 } },
        },
        {
            id: "assassin-Poison-strike",
            name: "Ядовитый удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 урона, накладывает яд (2 урона за ход, 3 хода)",
            icon: "assassin-poison-strike.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 2, debuff: { poison: { value: 2, duration: 3 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5, debuff: { poison: { value: 0.5, duration: 0.3 } } },
        },
        {
            id: "assassin-First-aid",
            name: "Первая помощь",
            type: "heal",
            rare: "rare",
            description: "Исцеляет 4 HP в течение 2 ходов",
            icon: "assassin-first-aid.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { hp: 4, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { hp: 1, duration: 0.2 } },
        },
        {
            id: "assassin-Little-tricks",
            name: "Маленькие хитрости",
            type: "buff",
            rare: "rare",
            description: "+3 урона на 2 хода",
            icon: "assassin-little-tricks.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { attack: 3, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { attack: 1, duration: 0.2 } },
        },
        {
            id: "assassin-Blind",
            name: "Ослепление",
            type: "control",
            rare: "rare",
            description: "30% шанс промаха у врага на 2 хода",
            icon: "assassin-blind.png",
            manaCost: 3,
            count: 1,
            bonus: { debuff: { hitChance: -30, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { hitChance: -3, duration: 0.2 } },
        },
        {
            id: "assassin-Insidious-strike",
            name: "Коварный удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 1 урон, +1 урона на 1 ход",
            icon: "assassin-insidious-strike.png",
            manaCost: 2,
            count: 1,
            bonus: { attack: 1, buff: { attack: 1, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5, buff: { attack: 0.3, duration: 0.2 } },
        },
        {
            id: "assassin-Blow-to-the-heart",
            name: "Удар в сердце",
            type: "control",
            rare: "rare",
            description: "Оглушает на 1 ход",
            icon: "assassin-blow-to-the-heart.png",
            manaCost: 3,
            count: 1,
            bonus: { debuff: { stun: true, duration: 1 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { stun: true, duration: 0.5 } },
        },
        {
            id: "assassin-Deadly-technique",
            name: "Смертельный прием",
            type: "attack",
            rare: "epic",
            description: "Наносит 5 урона",
            icon: "assassin-deadly-technique.png",
            manaCost: 7,
            count: 1,
            bonus: { attack: 5 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 7,
            upgradeEffect: { attack: 1 },
        },
        {
            id: "assassin-Sprint",
            name: "Спринт",
            type: "buff",
            rare: "rare",
            description: "+5 скорости на 2 хода",
            icon: "assassin-sprint.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { speed: 5, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { speed: 1, duration: 0.2 } },
        },
        {
            id: "assassin-Shadow-veil",
            name: "Теневая завеса",
            type: "defense",
            rare: "rare",
            description: "+3 уклонения на 2 хода",
            icon: "assassin-shadow-veil.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { dodge: 3, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { dodge: 1, duration: 0.2 } },
        },
        {
            id: "assassin-Critical-strike",
            name: "Критический удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 3 урона",
            icon: "assassin-critical-strike.png",
            manaCost: 4,
            count: 1,
            bonus: { attack: 3 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 1 },
        },
        {
            id: "assassin-Stealth",
            name: "Скрытность",
            type: "defense",
            rare: "rare",
            description: "+5 уклонения на 2 хода",
            icon: "assassin-stealth.png",
            manaCost: 3,
            count: 1,
            bonus: { buff: { dodge: 5, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { dodge: 1, duration: 0.2 } },
        },
        {
            id: "assassin-Agility",
            name: "Ловкость",
            type: "buff",
            rare: "rare",
            description: "+3 скорости на 2 хода",
            icon: "assassin-agility.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { speed: 3, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { speed: 1, duration: 0.2 } },
        },
        {
            id: "assassin-Shadow-strike",
            name: "Теневой удар",
            type: "attack",
            rare: "rare",
            description: "Наносит 2 урона",
            icon: "assassin-shadow-strike.png",
            manaCost: 3,
            count: 1,
            bonus: { attack: 2 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { attack: 0.5 },
        },
        {
            id: "assassin-Poison-trap",
            name: "Ядовитая ловушка",
            type: "control",
            rare: "rare",
            description: "Накладывает яд (2 урона за ход, 3 хода)",
            icon: "assassin-poison-trap.png",
            manaCost: 3,
            count: 1,
            bonus: { debuff: { poison: { value: 2, duration: 3 } } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { debuff: { poison: { value: 0.5, duration: 0.3 } } },
        },
        {
            id: "assassin-Quick-strike",
            name: "Быстрый удар",
            type: "attack",
            rare: "common",
            description: "Наносит 2 урона, +1 использование",
            icon: "assassin-quick-strike.png",
            manaCost: 2,
            count: 2,
            bonus: { attack: 2 },
            level: 1,
            maxLevel: 10,
            upgradeCost: 3,
            upgradeEffect: { attack: 0.5 },
        },
        {
            id: "assassin-Shadow-accuracy",
            name: "Теневая меткость",
            type: "buff",
            rare: "rare",
            description: "+3 меткости на 2 хода",
            icon: "assassin-shadow-accuracy.png",
            manaCost: 2,
            count: 1,
            bonus: { buff: { hitChance: 3, duration: 2 } },
            level: 1,
            maxLevel: 10,
            upgradeCost: 5,
            upgradeEffect: { buff: { hitChance: 1, duration: 0.2 } },
        },
    ],
};

interface Card {
    id: string;
    name: string;
    type: "attack" | "defense" | "buff" | "heal" | "control" | "utility";
    rare: "common" | "rare" | "epic";
    description: string;
    icon: string;
    manaCost: number;
    count: number;
    bonus: any;
    level: number;
    maxLevel: number;
    upgradeCost: number;
    upgradeEffect: any;
}

export default defineComponent({
    name: "Cards",
    setup() {
        const person = usePersonState();
        return { person };
    },
    data: () => ({
        selectedCard: null as Card | null,
        errorMessage: "",
        isLoading: false,
        activeCard: null as Card | null,
    }),
    computed: {
        cards(): Card[] {
            // @ts-ignore
            return cardsByClass[this.person.character.species as keyof typeof cardsByClass] || cardsByClass.ranger;
        },
        upgradePoints(): number {
            // @ts-ignore
            return this.person.character.upgradePoints || 0;
        },
        selectedCards(): { [key: string]: { level: number; count: number } } {
            // @ts-ignore
            return this.person.character.cards || {};
        },
    },
    methods: {
        getUpgradeCost(card: Card): number {
            const cardData = this.selectedCards[card.id] || { level: 1, count: 1 };
            const level = cardData.level;
            const baseCost = card.upgradeCost;
            const costIncrement = card.rare === "common" ? 1 : card.rare === "rare" ? 2 : 3;
            return baseCost + (level - 1) * costIncrement;
        },
        canUpgradeCard(card: Card): boolean {
            const cardData = this.selectedCards[card.id] || { level: 1, count: 1 };
            return (
                this.upgradePoints >= this.getUpgradeCost(card) &&
                cardData.level < card.maxLevel
            );
        },
        onSelectCard(card: Card) {
            this.selectedCard = card;
        },
        async onUpgrade(card: Card) {
            this.selectedCard = card;
            this.errorMessage = "";

            if (!this.canUpgradeCard(card)) {
                this.errorMessage = "Недостаточно очков улучшения или максимальный уровень!";
                return;
            }

            this.isLoading = true;
            try {
                const { data: userData, error: authError } = await this.$supabase.auth.getUser();
                if (authError || !userData.user) {
                    this.errorMessage = "Ошибка: пользователь не авторизован";
                    this.isLoading = false;
                    return;
                }

                const userId = userData.user.id;
                const cardData = this.selectedCards[card.id] || { level: 1, count: card.count };
                const updatedCard = {
                    ...cardData,
                    level: cardData.level + 1,
                };

                const updatedCards = {
                    ...this.selectedCards,
                    [card.id]: updatedCard,
                };

                // Применяем эффект улучшения
                for (const [key, value] of Object.entries(card.upgradeEffect)) {
                    if (key === "attack" || key === "hp") {
                        card.bonus[key] = (card.bonus[key] || 0) + value;
                    } else if (key === "buff" || key === "debuff") {
                        const target = card.bonus[key] || {};
                        // @ts-ignore
                        for (const [subKey, subValue] of Object.entries(value)) {
                            if (subKey === "poison" || subKey === "bleed" || subKey === "burn" || subKey === "freeze") {
                                target[subKey] = {
                                    // @ts-ignore
                                    value: (target[subKey]?.value || 0) + subValue.value,
                                    // @ts-ignore
                                    duration: (target[subKey]?.duration || 0) + (subValue.duration || 0),
                                };
                            } else if (subKey === "duration") {
                                target[subKey] = (target[subKey] || 0) + subValue;
                            } else {
                                target[subKey] = (target[subKey] !== undefined ? target[subKey] : (subValue === true ? true : 0)) + (typeof subValue === "number" ? subValue : 0);
                            }
                        }
                        card.bonus[key] = target;
                    }
                }

                // Обновляем описание карты
                card.description = this.generateCardDescription(card);

                // Сохраняем в Supabase
                const { error } = await this.$supabase
                    .from("characters")
                    .update({
                        cards: updatedCards,
                        upgradePoints: this.upgradePoints - this.getUpgradeCost(card),
                    })
                    .eq("id", userId);

                if (error) {
                    this.errorMessage = `Ошибка улучшения карты: ${error.message}`;
                    console.error(error);
                    this.isLoading = false;
                    return;
                }

                // @ts-ignore
                this.person.updateCards(updatedCards);
                // @ts-ignore
                this.person.character.upgradePoints -= this.getUpgradeCost(card);
                this.selectedCard = null;
            } catch (err) {
                this.errorMessage = "Неизвестная ошибка. Попробуйте позже.";
                console.error(err);
            } finally {
                this.isLoading = false;
            }
        },
        generateCardDescription(card: Card): string {
            let description = "";
            if (card.bonus.attack) description += `Наносит ${card.bonus.attack} урона`;
            if (card.bonus.hp) description += `${description ? ", " : ""}Восстанавливает ${card.bonus.hp} HP`;
            if (card.bonus.buff) {
                const buff = card.bonus.buff;
                if (buff.defence) description += `${description ? ", " : ""}+${buff.defence} защиты`;
                if (buff.attack) description += `${description ? ", " : ""}+${buff.attack} урона`;
                if (buff.dodge) description += `${description ? ", " : ""}+${buff.dodge} уклонения`;
                if (buff.mp) description += `${description ? ", " : ""}восстанавливает ${buff.mp} маны`;
                if (buff.hitChance) description += `${description ? ", " : ""}${typeof buff.hitChance === "number" ? `+${buff.hitChance} меткости` : "+100% шанс попадания"}`;
                if (buff.speed) description += `${description ? ", " : ""}${buff.speed > 0 ? "+" : ""}${buff.speed} скорости`;
                if (buff.critical) description += `${description ? ", " : ""}+${buff.critical}% шанс критического удара`;
                if (buff.ignoreDefense) description += `${description ? ", " : ""}игнорирует ${buff.ignoreDefense}% защиты`;
                if (buff.debuffImmune) description += `${description ? ", " : ""}невосприимчивость к дебаффам`;
                if (buff.immune) description += `${description ? ", " : ""}блокирует атаку`;
                if (buff.duration) description += ` на ${buff.duration} хода`;
            }
            if (card.bonus.debuff) {
                const debuff = card.bonus.debuff;
                if (debuff.poison) description += `${description ? ", " : ""}накладывает яд (${debuff.poison.value} урона за ход, ${debuff.poison.duration} хода)`;
                if (debuff.bleed) description += `${description ? ", " : ""}вызывает кровотечение (${debuff.bleed.value} урона за ход, ${debuff.bleed.duration} хода)`;
                if (debuff.burn) description += `${description ? ", " : ""}накладывает горение (${debuff.burn.value} урона за ход, ${debuff.burn.duration} хода)`;
                if (debuff.freeze) description += `${description ? ", " : ""}замораживает на ${debuff.freeze.duration} ход`;
                if (debuff.stun) description += `${description ? ", " : ""}оглушает на ${debuff.duration || 1} ход`;
                if (debuff.hitChance) description += `${description ? ", " : ""}шанс промаха ${-debuff.hitChance}%`;
                if (debuff.ignoreDefense) description += `${description ? ", " : ""}снижает защиту на ${debuff.ignoreDefense}%`;
                if (debuff.healBlock) description += `${description ? ", " : ""}блокирует исцеление`;
                if (debuff.speed) description += `${description ? ", " : ""}${debuff.speed} скорости`;
                if (debuff.duration && !debuff.stun && !debuff.healBlock && !debuff.poison && !debuff.bleed && !debuff.burn && !debuff.freeze) description += ` на ${debuff.duration} хода`;
            }
            if (card.bonus.aoe) description += `${description ? ", " : ""}всем врагам`;
            return description || card.description;
        },
    },
});
</script>

<template>
    <div class="cards">
        <div class="cards__container">
            <h2 class="cards__title">Карты</h2>
            <div v-if="errorMessage" class="cards__error">{{ errorMessage }}</div>
            <div v-if="isLoading" class="cards__loading">Загрузка...</div>
            <div class="cards__points">Очки улучшения: {{ upgradePoints }}</div>
            <div class="cards__grid">
                <div
                    v-for="card in cards"
                    :key="card.id"
                    class="cards__card"
                    :class="{
                        'cards__card--disabled': !canUpgradeCard(card),
                        'cards__card--attack': card.type === 'attack',
                        'cards__card--defense': card.type === 'defense',
                        'cards__card--buff': card.type === 'buff',
                        'cards__card--heal': card.type === 'heal',
                        'cards__card--control': card.type === 'control',
                        'cards__card--active': selectedCard?.id === card.id,
                    }"
                    @click="onSelectCard(card)"
                >
                    <nuxt-img
                        class="cards__image"
                        :src="`/images/components/cards/${person.character.species}/${card.icon}`"
                        :alt="card.name"
                    />
                    <span class="cards__level">Уровень: {{ selectedCards[card.id]?.level || 1 }}/{{ card.maxLevel }}</span>
                </div>
            </div>
            <div class="cards__block" v-if="selectedCard">
                <div class="cards__descriptions" v-for="card in cards" :key="card.id" v-if="
                  // @ts-ignore
                selectedCard.id === card.id">
                    <div class="cards__name">{{ card.name }}</div>
                    <div class="cards__description">{{ card.description }}</div>
                    <div class="cards__cost">Стоимость улучшения: {{ getUpgradeCost(card) }}</div>
                    <div class="cards__type">{{ card.type }}</div>
                    <div class="cards__buttons">
                        <button
                            :class="[!canUpgradeCard(card) ? 'button--disabled' : '', 'cards__event button button--metal']"
                            :disabled="!canUpgradeCard(card)"
                            type="button"
                            @click="onUpgrade(card)"
                        >
                            Улучшить
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<style scoped lang="scss">
@use "cards";
</style>
<script lang="ts">
import { defineComponent } from "vue";
import { usePersonState } from "~/stores/person";
// import { createClient } from "@supabase/supabase-js";

export default defineComponent({
    name: "Char",
    async setup() {
        const char = usePersonState();
        const inventory = reactive([
            { id: "herb-green", name: "Зеленая трава", icon: "🌿", count: 20, type: "material", description: "Простая трава" },
            { id: "beast-milk", name: "Молоко зверя", icon: "⚗️", count: 40, type: "material", description: "Простое молоко" },
            {
                id: "shield1", name: "Щит", icon: "🛡️", count: 1, type: "equip", description: "Щит со статами", stats: {
                    str: 1,
                    def: 0,
                    luc: 0,
                    spd: 0,
                    int: 0,
                    acc: 0,
                    vit: 1,
                    agi: 0,
                },
                set: {
                    type: "",
                },
            },
            {
                id: "weapon1", name: "Мечи", icon: "⚔️", count: 1, type: "weapon",
                description: "Оружие со статами",
                stats: {
                    str: 1,
                    def: 0,
                    luc: 0,
                    spd: 2,
                    int: 0,
                    acc: 0,
                    vit: 0,
                    agi: 0,
                },
                set: {
                    type: "",
                },
                buffs: {
                    value: 0,
                    type: "",
                },
            },
            {
                id: "potion1",
                name: "Зелье маны",
                icon: "️🧪",
                count: 2,
                type: "potion",
                description: "Восполняет ману на 1 ед.",
                buffs: {
                    value: 1,
                    type: "mp",
                },
            },
        ]);

        return {
            char,
            inventory,
        };
    },
    methods: {
        onUpChars(val: number, type: string): void {
            this.char.character.game_stats.freeCount = this.char.character.game_stats.freeCount - 1;
            this.char.setValChars(val, type);
        },
        profPercentage(exp:number, needExp: number): any {
            return (exp / needExp) * 100;
        }
    },
    computed: {
        // Процент HP
        // hpPercentage() {
        //     return (this.maxHp / this.maxHp) * 100;
        // },
        // // Процент MP
        // mpPercentage() {
        //     return (this.maxMp / this.maxMp) * 100;
        // },
        // Процент EXP
        expPercentage(): any {
            const expNeeded = this.char.character.game_stats.level * 10;
            // Если опыт превышает необходимый для уровня
            if (this.char.character.game_stats.currentExp >= expNeeded) {
                const excessExp = this.char.character.game_stats.currentExp - expNeeded;
                this.char.setUpLevel();
                this.char.character.game_stats.currentExp = excessExp; // Переносим избыточный опыт

                // Рекурсивно проверяем, не хватает ли избыточного опыта для следующего уровня
                if (this.char.character.game_stats.currentExp >= this.char.character.game_stats.level * 10) {
                    return this.expPercentage;
                }
            }
            return (this.char.character.game_stats.currentExp / expNeeded) * 100;
        },
    },
    mounted() {
    }
});
</script>

<template>
    <div class="char">
        <button class="char__button button" type="button" data-bs-toggle="modal"
                data-bs-target="#chars-stats">
            <nuxt-img class="char__image" :src="`/images/sprites/persons/${char.character.species}/icon-${char.character.species}.png`"
                      alt="Иконка персонажа" />
        </button>
        <div class="char__health">
<!--            <div class="char__wrap">-->
<!--                <ProgressBar class="char__hp" :value="hpPercentage" :showValue="false"></ProgressBar>-->
<!--                <div class="char__description">-->
<!--                    Здоровье-->
<!--                    <div class="char__value">-->
<!--                        {{ maxHp }}/{{ maxHp }}-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->
<!--            <div class="char__wrap">-->
<!--                <ProgressBar class="char__mp" :value="mpPercentage" :showValue="false"></ProgressBar>-->
<!--                <div class="char__description">-->
<!--                    Мана-->
<!--                    <div class="char__value">-->
<!--                        {{ maxMp }}/{{ maxMp }}-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->
        </div>
    </div>
    <Modal size="lg" id="chars-stats">
        <div class="block">
            <div class="block__block">
                <div class="block__wrapper">
                    <h3 class="block__title">Характеристики</h3>
                    <div class="block__counts">Доступно очков {{ char.character.game_stats.freeCount }}</div>
                </div>
                <div class="block__characteristic characteristic">
                    <ul class="characteristic__main list">
                        <li class="characteristic__item">
                            <div class="characteristic__name">Атака</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.attack }}
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'attack')">+
                                </button>
                            </div>
                        </li>
                        <li class="characteristic__item">
                            <div class="characteristic__name">Крит. шанс</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.critical }}%
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'critical')">+
                                </button>
                            </div>
                        </li>
                        <li class="characteristic__item">
                            <div class="characteristic__name">Здоровье</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.hp }}
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'hp')">+
                                </button>
                            </div>
                        </li>
                        <li class="characteristic__item">
                            <div class="characteristic__name">Мана</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.mp }}
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'mp')">+
                                </button>
                            </div>
                        </li>
                        <li class="characteristic__item">
                            <div class="characteristic__name">Меткость</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.hitChance }}%
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'hitChance')">+
                                </button>
                            </div>
                        </li>
                        <li class="characteristic__item">
                            <div class="characteristic__name">Шанс уворота</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.dodge }}
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'dodge')">+
                                </button>
                            </div>
                        </li>
                        <li class="characteristic__item">
                            <div class="characteristic__name">Скорость</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.speed }}
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'speed')">+
                                </button>
                            </div>
                        </li>
                        <li class="characteristic__item">
                            <div class="characteristic__name">Защита</div>
                            <div class="characteristic__value">
                                {{ char.character.stats.defence }}
                                <button v-if="char.character.game_stats.freeCount" class="characteristic__plus button" type="button"
                                        @click="onUpChars(1, 'defence')">+
                                </button>
                            </div>
                        </li>
                    </ul>
                </div>
                <div class="block__line"></div>
                <div class="block__wrapper">
                    <h3 class="block__title">Профессии</h3>
                    <div class="block__level">Ур. {{ char.character.game_stats.level }}</div>
                    <div class="block__exp">
                        <ProgressBar class="block__progress" :value="expPercentage" :showValue="false"></ProgressBar>
                        <div class="block__value">
                            Опыт {{ char.character.game_stats.currentExp }}/{{ char.character.game_stats.level * 10 }}
                        </div>
                    </div>
                </div>

                <div class="block__professions prof">
                    <div class="prof__item" v-for="(prof, index) in char.character.professions" :key="index">
                        <div class="prof__name">{{prof.short}}</div>
                        <div class="prof__exp">
                            <div class="prof__wrap">
                                <ProgressBar class="prof__progress" :value="profPercentage(prof.exp, prof.needExp)" :showValue="false"></ProgressBar>
                                <div class="prof__description">
                                    Опыт
                                    <div class="prof__value">
                                        {{ prof.exp }}/{{ prof.needExp }}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="prof__lvl">Ур. {{prof.lvl}}</div>
                    </div>
                </div>
            </div>
            <div class="block__wrap">
                <Equip />
                <Inventory :inventory="inventory" />
            </div>
        </div>
    </Modal>
</template>

<style scoped lang="scss">
@use "char";
@use "block";
@use "characteristic";
@use "prof"
</style>
<script lang="ts">
import { defineComponent } from "vue";

interface Stats {
    str?: number;
    def?: number;
    luc?: number;
    spd?: number;
    int?: number;
    acc?: number;
    vit?: number;
    agi?: number;
}

interface Set {
    type: string;
}

interface Buffs {
    value: number;
    type: "hp" | "mp" | "str" | string;
}

interface InventoryItem {
    id: string;
    name: string;
    icon: string;
    count: number;
    type: "material" | "equip" | "weapon" | "potion";
    description: string;
    stats?: Stats;
    set?: Set;
    buffs?: Buffs;
}

interface RecipeIngredient {
    id: string;
    name: string;
    icon: string;
    count: number;
}

interface Recipe {
    id: string;
    name: string;
    description: string;
    image: string;
    type: "potion" | string; // Уточните возможные типы рецептов
    buffs?: Buffs;
    ingredients: RecipeIngredient[];
    requirements: string;
}

export default defineComponent({
    name: "Craft",
    setup() {
        // @ts-ignore
        const inventory = reactive<(InventoryItem | SimpleInventoryItem)[]>([
            {
                id: "herb-green",
                name: "Зеленая трава",
                icon: "🌿",
                count: 20,
                type: "material",
                description: "Простая трава",
            },
            {
                id: "beast-milk",
                name: "Молоко зверя",
                icon: "⚗️",
                count: 40,
                type: "material",
                description: "Простое молоко",
            },
            {
                id: "shield1", name: "Щит", icon: "🛡️", count: 1, type: "equip", description: "Щит со статами", stats: {
                    str: 1,
                    def: 0,
                    luc: 0,
                    spd: 0,
                    int: 0,
                    acc: 0,
                    vit: 1,
                    agi: 0,
                },
                set: {
                    type: "",
                },
            },
            {
                id: "weapon1", name: "Мечи", icon: "⚔️", count: 1, type: "weapon",
                description: "Оружие со статами",
                stats: {
                    str: 1,
                    def: 0,
                    luc: 0,
                    spd: 2,
                    int: 0,
                    acc: 0,
                    vit: 0,
                    agi: 0,
                },
                set: {
                    type: "",
                },
                buffs: {
                    value: 0,
                    type: "",
                },
            },
            {
                id: "potion1",
                name: "Зелье маны",
                icon: "️🧪",
                count: 2,
                type: "potion",
                description: "Восполняет ману на 1 ед.",
                buffs: {
                    value: 1,
                    type: "mp",
                },
            },
        ]);
        const recipes = [
            {
                id: "health_potion",
                name: "Зелье здоровья",
                description: "Восстанавливает 50 HP",
                image: "🧪",
                type: "potion",
                buffs: {
                    value: 1,
                    type: "hp",
                },
                ingredients: [
                    { id: "herb-green", name: "Зеленая трава", icon: "🌿", count: 3 },
                    { id: "beast-milk", name: "Молоко зверя", icon: "⚗️", count: 4 },
                    { id: "potion1", name: "Зелье маны", icon: "🧪", count: 1 },
                ],
                requirements: "Уровень алхимии 2",
            },
            {
                id: "mana_potion",
                name: "Зелье маны",
                description: "Восстанавливает 50 Маны",
                image: "🧪",
                type: "potion",
                ingredients: [
                    { id: "herb-green", name: "Зеленая трава", icon: "🌿", count: 2 },
                    { id: "beast-milk", name: "Молоко зверя", icon: "⚗️", count: 4 },
                ],
                requirements: "Уровень алхимии 2",
            },
            {
                id: "str_potion1",
                name: "Зелье силы",
                description: "Добавляет 1 силы в бою",
                image: "🧪",
                type: "potion",
                buffs: {
                    value: 1,
                    type: "str",
                },
                ingredients: [
                    { id: "herb-green", name: "Зеленая трава", icon: "🌿", count: 4 },
                    { id: "beast-milk", name: "Молоко зверя", icon: "⚗️", count: 5 },
                ],
                requirements: "Уровень алхимии 2",
            },
        ];
        return {
            recipes,
            inventory,
        };
    },
    data: () => ({
        selectedRecipe: null as Recipe | null,
        craftSlots: [] as InventoryItem[],
    }),
    methods: {
        selectRecipe(recipe: Recipe) {
            this.selectedRecipe = recipe;
            this.craftSlots = []; // Сбрасываем слоты при выборе нового рецепта
        },
        removeAllIngridient() {
            this.craftSlots.forEach(slot => {
                const inventoryItem = this.inventory.find((i: any) => i.id === slot.id);
                if (inventoryItem) inventoryItem.count += slot.count;
            });
            this.craftSlots = [];
        },
        addIngredient(item: InventoryItem) {
            if (!this.selectedRecipe) return;

            // Проверяем, нужен ли этот предмет в рецепте
            const isNeeded = this.selectedRecipe.ingredients.some(
                ing => ing.id === item.id,
            );

            if (!isNeeded) {
                alert("Этот предмет не нужен для выбранного рецепта!");
                return;
            }

            // Проверяем, есть ли уже такой предмет в слотах
            const existingIndex = this.craftSlots.findIndex(slot => slot.id === item.id);
            const inventoryItem = this.inventory.find((i: any) => i.id === item.id);

            if (!inventoryItem || inventoryItem.count <= 0) {
                alert("Недостаточно предметов в инвентаре!");
                return;
            }

            if (existingIndex >= 0) {
                // Увеличиваем количество существующего предмета
                this.craftSlots[existingIndex].count++;
            } else {
                // Добавляем новый предмет в слоты
                this.craftSlots.push({ ...item, count: 1 });
            }

            // Уменьшаем количество в инвентаре
            if (inventoryItem) inventoryItem.count--;
        },

        removeIngredient(slotIndex: number) {
            const item = this.craftSlots[slotIndex];
            if (!item) return;

            // Возвращаем предмет в инвентарь
            const inventoryItem = this.inventory.find((i: any) => i.id === item.id);
            if (inventoryItem) inventoryItem.count += 1;

            // Удаляем из слотов
            // Уменьшаем количество в слоте или удаляю, если 1
            if (item.count > 1) {
                this.craftSlots[slotIndex].count--;
            } else {
                this.craftSlots.splice(slotIndex, 1);
            }
        },

        craftItem() {
            if (!this.selectedRecipe) return;

            // Проверяем, все ли ингредиенты собраны в нужном количестве
            const hasAllIngredients = this.selectedRecipe.ingredients.every(recipeIng => {
                const slotIng = this.craftSlots.find(slot => slot.id === recipeIng.id);
                return slotIng && slotIng.count >= recipeIng.count;
            });

            if (hasAllIngredients) {
                // Уменьшаем количество использованных предметов
                this.selectedRecipe.ingredients.forEach(recipeIng => {
                    const slotIndex = this.craftSlots.findIndex(slot => slot.id === recipeIng.id);
                    if (slotIndex >= 0) {
                        this.craftSlots[slotIndex].count -= recipeIng.count;
                        if (this.craftSlots[slotIndex].count <= 0) {
                            this.craftSlots.splice(slotIndex, 1);
                        }
                    }
                });
                // Создаем готовый предмет
                const craftedItem: InventoryItem = {
                    id: this.selectedRecipe.id,
                    name: this.selectedRecipe.name,
                    icon: this.selectedRecipe.image,
                    count: 1,
                    type: this.selectedRecipe.type as "potion" | "material" | "equip" | "weapon",
                    description: this.selectedRecipe.description,
                    buffs: this.selectedRecipe.buffs || { value: 0, type: "" },
                };
                // проверяем наличие в инвентаре
                const exitingItem = this.inventory.find((item: any) => item.id === craftedItem.id);
                if (exitingItem) {
                    exitingItem.count += craftedItem.count;
                } else {
                    this.inventory.push(craftedItem);
                }
            } else {
                alert("Не хватает ингредиентов!");
            }
        },
    },
    computed: {
        canCraft(): boolean {
            if (!this.selectedRecipe) return false;

            return this.selectedRecipe.ingredients.every(recipeIng => {
                const slotIng = this.craftSlots.find(slot => slot.id === recipeIng.id);
                return slotIng && slotIng.count >= recipeIng.count;
            });
        },
    },
});
</script>

<template>
    <div class="craft">
        <div class="craft__bug">
            <div class="craft__wrap">
                <h4 class="craft__title">{{ selectedRecipe?.name || "Выберите рецепт" }}</h4>
                <div class="craft__image">{{ selectedRecipe?.image || "❓" }}</div>
            </div>
            <div class="craft__system">
                <div
                    v-for="(slot, index) in craftSlots"
                    :key="index"
                    class="craft__item"
                    @click="slot ? removeIngredient(index) : null"
                >
                    <div v-if="slot" class="craft__slot-content">
                        {{ slot.icon }}
                        <span class="craft__count">{{ slot.count }}</span>
                    </div>
                    <div v-else class="craft__empty-slot">Слот {{ index + 1 }}</div>
                </div>
            </div>
            <div class="craft__buttons">
                <button class="craft__button button button--metal-sm" type="button" :disabled="!canCraft"
                        @click="craftItem">Создать
                </button>
                <button class="craft__button button button--metal-sm" type="button"
                        @click="removeAllIngridient">Сбросить
                </button>
            </div>
        </div>
        <CraftRecipes :recipes="recipes" @select-recipe="selectRecipe" class="craft__recipes" />
        <Inventory :inventory="inventory" location="craft"
                   @item-click="addIngredient"
                   class="craft__inventory" />
    </div>
</template>

<style scoped lang="scss">
@use "craft";
</style>
<script lang="ts">
import { defineComponent } from "vue";

interface Recipe {
    id: string;
    name: string;
    image: string;
}

export default defineComponent({
    name: "CraftRecipes",
    props: {
        recipes: {
            type: Array as () => Array<{
                id: string;
                name: string;
                description: string;
                image: string;
                ingredients: Array<{
                    id: string;
                    name: string;
                    icon: string;
                    count: number;
                }>;
                requirements: string;
            }>,
            required: true,
        },
    },
    data: () => ({
        isSelected: "" as string,
    }),
    methods: {
        selectRecipe(recipe: Recipe) {
            this.isSelected = recipe.id;
            this.$emit("select-recipe", recipe);
        },
    },
});
</script>

<template>
    <div class="recipes">
        <div class="recipes__wrap">
            <h3 class="recipes__title">Рецепты</h3>
            <div class="recipes__filters">
                <button class="recipes__filter button button--metal-sm active" type="button">
                    Все
                </button>
                <button class="recipes__filter button button--metal-sm" type="button">
                    Оружия
                </button>
                <button class="recipes__filter button button--metal-sm" type="button">
                    Зелья
                </button>
            </div>
        </div>
        <ul class="recipes__items list">
            <li :class="[isSelected === recipe.id ? 'recipes__item--active' : '', 'recipes__item']" v-for="(recipe, index) in recipes" :key="index" @click="selectRecipe(recipe)">
                <div class="recipes__block">
                    <div class="recipes__name"><strong>{{ recipe.name }}</strong></div>
                    <div class="recipes__image">{{ recipe.image }}</div>
                </div>
                <div class="recipes__description">{{ recipe.description }}</div>
                <h4 class="recipes__subtitle">Ингредиенты</h4>
                <div class="recipes__ingredients">
                    <div class="recipes__ingredient" v-for="(ingr, j) in recipe.ingredients" :key="j">
                        <div class="recipes__icon">{{ ingr.icon }}</div>
                        <div class="recipes__ingredient-name">{{ingr.name}}&nbsp;x{{ingr.count}}</div>
                    </div>
                </div>
                <div class="recipes__requirements">
                    <h4 class="recipes__subtitle">Требования</h4>
                    <div class="recipes__requirement">{{ recipe.requirements }}</div>
                </div>
            </li>
        </ul>
    </div>
</template>

<style scoped lang="scss">
@use "recipes";
</style>
<script lang="ts">
import { defineComponent } from "vue";

export default defineComponent({
    name: "Equip",
});
</script>

<template>
    <div class="equip">
        <h3 class="equip__title">Снаряжение</h3>
        <div class="equip__items">
            <div class="equip__item equip__item--necklace">
                <nuxt-img class="equip__plug" src="images/pages/equip/necklace.jpg" alt="Изображение ожерелья"/>
                <nuxt-img class="equip__image" src="" alt="Изображение ожерелья"/>
            </div>
            <div class="equip__item equip__item--shoulder">
                <nuxt-img class="equip__plug" src="images/pages/equip/shoulder.jpg" alt="Изображение наплечников"/>
                <nuxt-img class="equip__image" src="" alt="Изображение наплечников"/>
            </div>
            <div class="equip__item equip__item--body">
                <nuxt-img class="equip__plug" src="images/pages/equip/body.jpg" alt="Изображение нагрудника"/>
                <nuxt-img class="equip__image" src="" alt="Изображение нагрудника"/>
            </div>
            <div class="equip__item equip__item--bracelets">
                <nuxt-img class="equip__plug" src="images/pages/equip/bracer.jpg" alt="Изображение браслетов"/>
                <nuxt-img class="equip__image" src="" alt="Изображение браслетов"/>
            </div>
            <div class="equip__item equip__item--gloves">
                <nuxt-img class="equip__plug" src="images/pages/equip/gloves.jpg" alt="Изображение перчаток"/>
                <nuxt-img class="equip__image" src="" alt="Изображение перчаток"/>
            </div>
            <div class="equip__item equip__item--pants">
                <nuxt-img class="equip__plug" src="images/pages/equip/pants.jpg" alt="Изображение поножей"/>
                <nuxt-img class="equip__image" src="" alt="Изображение поножей"/>
            </div>
            <div class="equip__item equip__item--shoes">
                <nuxt-img class="equip__plug" src="images/pages/equip/shoes.jpg" alt="Изображение обуви"/>
                <nuxt-img class="equip__image" src="" alt="Изображение обуви"/>
            </div>
            <div class="equip__item equip__item--ring">
                <nuxt-img class="equip__plug" src="images/pages/equip/ring.jpg" alt="Изображение кольца"/>
                <nuxt-img class="equip__image" src="" alt="Изображение кольца"/>
            </div>
        </div>
        <div class="equip__weapons">
            <div class="equip__item equip__item--weapon">
                <nuxt-img class="equip__plug" src="images/pages/equip/sword.jpg" alt="Изображение оружия"/>
                <nuxt-img class="equip__image" src="" alt="Изображение оружия"/>
            </div>
        </div>
    </div>
</template>

<style scoped lang="scss">
@use "equip";
</style>
<script lang="ts">
import { defineComponent } from "vue";

export default defineComponent({
    name: "Registration",
    data() {
        return {
            form: {
                username: "",
                password: "",
                isSelectedSpecies: false,
                isAdmin: false,
            },
            formError: "" as string,
        };
    },
    methods: {
        async createUser() {
            // Сбрасываем предыдущую ошибку
            this.formError = "";

            // Валидация
            if (!this.form.username || !this.form.password) {
                this.formError = "Заполните все поля";
                return;
            }
            if (this.form.password.length < 6) {
                this.formError = "Пароль должен быть не короче 6 символов";
                return;
            }

            try {
                const { data, error } = await this.$supabase.auth.signUp({
                    email: `${this.form.username}@mail.ru`, // Supabase требует email, используем заглушку
                    password: this.form.password,
                    options: {
                        data: {
                            username: this.form.username,
                            isSelectedSpecies: this.form.isSelectedSpecies,
                            isAdmin: this.form.isAdmin,
                        },
                    },
                });

                if (error) {
                    if (error.message.includes("User already registered")) {
                        this.formError = "Пользователь с таким именем уже существует";
                    } else {
                        this.formError = "Ошибка регистрации: " + error.message;
                    }
                    return;
                }

                // Успешная регистрация
                const bootstrap = this.$bootstrap as any;
                const modal = bootstrap.Modal.getInstance(document.querySelector("#registration"));
                modal && modal.hide();

                // Перенаправление или уведомление
                this.$router.push("/"); // Или другая страница
            } catch (err) {
                this.formError = "Неизвестная ошибка. Попробуйте позже.";
                console.error(err);
            }
        },
    },
});
</script>

<template>
    <div class="registration">
        <h2 class="registration__title">Регистрация</h2>
        <form enctype="application/x-www-form-urlencoded" @submit.prevent="createUser">
            <div class="registration__field">
                <input
                    class="registration__input"
                    v-model="form.username"
                    type="text"
                    autocomplete="off"
                    placeholder="Имя пользователя"
                />
            </div>
            <div class="registration__field">
                <input
                    class="registration__input"
                    v-model="form.password"
                    type="password"
                    autocomplete="new-password"
                    placeholder="Пароль"
                />
            </div>
            <div class="registration__buttons">
                <button class="registration__button button button--metal" type="submit">Создать пользователя</button>
            </div>
            <div class="registration__error" v-if="formError">{{ formError }}</div>
        </form>
    </div>
</template>

<style scoped lang="scss">
@use "registration";
</style>
<script lang="ts">
import { defineComponent } from "vue";
import { usePersonState } from "~/stores/person";

export default defineComponent({
    name: "Auth",
    data() {
        return {
            form: {
                username: "",
                password: "",
            },
            formError: "" as string,
        };
    },
    methods: {
        async logIn() {
            // Сбрасываем предыдущую ошибку
            this.formError = "";

            // Валидация
            if (!this.form.username || !this.form.password) {
                this.formError = "Заполните все поля";
                return;
            }

            try {
                const { data, error } = await this.$supabase.auth.signInWithPassword({
                    email: `${this.form.username}@mail.ru`, // Заглушка для email
                    password: this.form.password,
                });

                if (error) {
                    this.formError = "Ошибка входа: неверное имя пользователя или пароль";
                    return;
                }

                // Получаем данные пользователя
                const user = data.user;
                const personStore = usePersonState();
                personStore.setLogin(user.user_metadata.username || this.form.username);
                personStore.setSpecies(user.user_metadata.isSelectedSpecies || false);
                personStore.setAdmin(user.user_metadata.isAdmin || false);

                // Закрываем модальное окно
                const bootstrap = this.$bootstrap as any;
                const modal = bootstrap.Modal.getInstance(document.querySelector("#auth"));
                modal && modal.hide();

                // Перенаправляем на главную страницу
                if (personStore.isSelectedSpecies) {
                    this.$router.push("/town/");
                } else {
                    this.$router.push("/selections/");
                }

            } catch (err) {
                this.formError = "Неизвестная ошибка. Попробуйте позже.";
                console.error(err);
            }
        },
        async logOut() {
            try {
                const { error } = await this.$supabase.auth.signOut();
                if (error) throw error;

                // Очищаем состояние
                const personStore = usePersonState();
                personStore.clear();

                // Закрываем модальное окно
                const bootstrap = this.$bootstrap as any;
                const modal = bootstrap.Modal.getInstance(document.querySelector("#auth"));
                modal && modal.hide();
            } catch (err) {
                this.formError = "Ошибка выхода: " + (err as Error).message;
                console.error(err);
            }
        },
    },
});
</script>

<template>
    <div class="auth">
        <h2 class="auth__title">Вход</h2>
        <form enctype="application/x-www-form-urlencoded" @submit.prevent="logIn">
            <div class="auth__field">
                <input
                    class="auth__input"
                    v-model="form.username"
                    type="text"
                    autocomplete="off"
                    placeholder="Имя пользователя"
                />
            </div>
            <div class="auth__field">
                <input
                    class="auth__input"
                    v-model="form.password"
                    type="password"
                    autocomplete="current-password"
                    placeholder="Пароль"
                />
            </div>
            <div class="auth__error" v-if="formError">{{ formError }}</div>
            <div class="auth__buttons">
                <button class="auth__button button button--metal" type="submit">Войти</button>
                <button class="auth__button button button--metal" type="button" @click="logOut">Выйти</button>
            </div>
        </form>
    </div>
</template>

<style scoped lang="scss">
@use "auth";
</style>
<script lang="ts">

interface Stats {
    str?: number;
    def?: number;
    luc?: number;
    spd?: number;
    int?: number;
    acc?: number;
    vit?: number;
    agi?: number;
}

interface Set {
    type: string;
}

interface Buffs {
    value: number;
    type: "hp" | "mp" | "str" | string;
}

interface InventoryItem {
    id: string;
    name: string;
    icon: string;
    count: number;
    type: "material" | "equip" | "weapon" | "potion";
    description: string;
    stats?: Stats;
    set?: Set;
    buffs?: Buffs;
}

interface RecipeIngredient {
    id: string;
    name: string;
    icon: string;
    count: number;
}

interface Recipe {
    id: string;
    name: string;
    description: string;
    image: string;
    type: "potion" | string; // Уточните возможные типы рецептов
    buffs?: Buffs;
    ingredients: RecipeIngredient[];
    requirements: string;
}

interface SimpleInventoryItem {
    id: string;
    name: string;
    icon: string;
    count: number;
    description: string;
    type: string;
    stats?: Stats;
}

export default defineComponent({
    name: "Inventory",
    props: {
        // @ts-ignore
        inventory: {
            type: Array as PropType<(InventoryItem | SimpleInventoryItem)[]>,
            required: true,
            default: () => [] as InventoryItem[],
        },
        location: {
            type: String,
            required: false,
            default: "",
        },
    },
    data: () => ({
        activeContextItemId: null as string | null,
        activeFilter: "all" as "all" | "equip" | "potion" | "material",
    }),
    computed: {
        filteredInventory(): (InventoryItem | SimpleInventoryItem)[] {
            switch (this.activeFilter) {
                case "equip":
                    return this.inventory.filter(item =>
                        item.type === "equip" || item.type === "weapon");
                case "potion":
                    return this.inventory.filter(item =>
                        item.type === "potion");
                case "material":
                    return this.inventory.filter(item =>
                        item.type === "material");
                case "all":
                default:
                    return this.inventory;
            }
        },
    },
    methods: {
        handleClick(item: any) {
            if (item.count > 0) {
                this.$emit("item-click", item);
            }
        },
        handleContext(item: InventoryItem | SimpleInventoryItem, event: MouseEvent) {
            event.preventDefault();
            event.stopPropagation();
            this.activeContextItemId = item.id;

            // Добавляем обработчик для клика вне элемента
            const handleClickOutside = (e: MouseEvent) => {
                if (!(e.target as HTMLElement).closest(".inventory__slot.inventory__slot--context")) {
                    this.activeContextItemId = null;
                    document.removeEventListener("click", handleClickOutside);
                    document.removeEventListener("contextmenu", handleClickOutside);
                }
            };

            // Удаляем предыдущие обработчики, если были
            document.removeEventListener("click", handleClickOutside);
            document.removeEventListener("contextmenu", handleClickOutside);

            // Добавляем новые обработчики
            document.addEventListener("click", handleClickOutside);
            document.addEventListener("contextmenu", handleClickOutside);

            console.log("Правый клик по предмету:", item);
        },
        removeItem(item: any) {
            this.$emit("item-remove", item);
        },
        onEquip(item: any) {

        },
        onUse(item: any) {

        },
        setFilter(filterType: "all" | "equip" | "potion" | "material") {
            this.activeFilter = filterType;
        },
    },
});
</script>

<template>
    <div :class="[location ? `inventory--${location}`: '','inventory']">
        <div class="inventory__wrap">
            <h3 class="inventory__title">Инвентарь</h3>
            <div class="inventory__filters">
                <button
                    :class="[activeFilter === 'all' ? 'active' : '', 'inventory__button button button--metal-sm']"
                    type="button"
                    title="Весь инвентарь"
                    @click="setFilter('all')"
                >
                    <nuxt-img class="inventory__filter-image" src="/images/components/filters/all.png"
                              alt="Декоративное изображение" />
                </button>
                <button
                    :class="[activeFilter === 'equip' ? 'active' : '', 'inventory__button button button--metal-sm']"
                    type="button"
                    title="Снаряжение"
                    @click="setFilter('equip')"
                >
                    <nuxt-img class="inventory__filter-image" src="/images/components/filters/equip.png"
                              alt="Декоративное изображение" />
                </button>
                <button
                    :class="[activeFilter === 'potion' ? 'active' : '', 'inventory__button button button--metal-sm']"
                    type="button"
                    title="Еда и зелья"
                    @click="setFilter('potion')"
                >
                    <nuxt-img class="inventory__filter-image" src="/images/components/filters/potion.png"
                              alt="Декоративное изображение" />
                </button>
                <button
                    :class="[activeFilter === 'material' ? 'active' : '', 'inventory__button button button--metal-sm']"
                    type="button"
                    title="Материалы"
                    @click="setFilter('material')"
                >
                    <nuxt-img class="inventory__filter-image" src="/images/components/filters/material.png"
                              alt="Декоративное изображение" />
                </button>
            </div>
        </div>
        <div class="inventory__slots">
            <div v-for="(item, index) in filteredInventory" :key="index" @click="handleClick(item)"
                 @contextmenu="handleContext(item, $event)" draggable="true"
                 :class="[activeContextItemId === item.id ? 'inventory__slot--context' : '','inventory__slot']">
                <span class="inventory__icon">{{ item.icon }}</span>
                <span class="inventory__count">{{ item.count }}</span>
            </div>
        </div>
        <div class="inventory__context" v-if="activeContextItemId">
            <div class="inventory__descriptions" v-for="(item, index) in filteredInventory" :key="index">
                <div v-if="activeContextItemId === item.id">
                    <div class="inventory__name">{{ item.name }}</div>
                    <div class="inventory__description">{{ item.description }}</div>
                    <div class="inventory__stats" v-if="item.stats">
                        <div class="inventory__stat">
                            <div class="inventory__block" v-if="item.stats.str !== 0">
                                <div class="inventory__stat-name">Сила</div>
                                <div class="inventory__stat-value">{{ item.stats.str }}</div>
                            </div>
                            <div class="inventory__block" v-if="item.stats.def !== 0">
                                <div class="inventory__stat-name">Защита</div>
                                <div class="inventory__stat-value">{{ item.stats.def }}</div>
                            </div>
                            <div class="inventory__block" v-if="item.stats.vit !== 0">
                                <div class="inventory__stat-name">Вынос.</div>
                                <div class="inventory__stat-value">{{ item.stats.vit }}</div>
                            </div>
                            <div class="inventory__block" v-if="item.stats.int !== 0">
                                <div class="inventory__stat-name">Интелект</div>
                                <div class="inventory__stat-value">{{ item.stats.int }}</div>
                            </div>
                            <div class="inventory__block" v-if="item.stats.luc !== 0">
                                <div class="inventory__stat-name">Удача</div>
                                <div class="inventory__stat-value">{{ item.stats.luc }}</div>
                            </div>
                            <div class="inventory__block" v-if="item.stats.agi !== 0">
                                <div class="inventory__stat-name">Ловкость</div>
                                <div class="inventory__stat-value">{{ item.stats.agi }}</div>
                            </div>
                            <div class="inventory__block" v-if="item.stats.acc !== 0">
                                <div class="inventory__stat-name">Меткость</div>
                                <div class="inventory__stat-value">{{ item.stats.acc }}</div>
                            </div>
                            <div class="inventory__block" v-if="item.stats.spd !== 0">
                                <div class="inventory__stat-name">Скорость</div>
                                <div class="inventory__stat-value">{{ item.stats.spd }}</div>
                            </div>
                        </div>

                    </div>
                    <div class="inventory__buttons" v-if="location !== 'craft'">
                        <button class="inventory__event button button--metal-sm" type="button"
                                v-if="item.type !== 'material' && item.type !== 'equip' && item.type !== 'weapon'"
                                @click="onUse(item)">Использовать
                        </button>
                        <button class="inventory__event button button--metal-sm" type="button"
                                v-if="item.type === 'weapon' || item.type === 'equip'" @click="onEquip(item)">Надеть
                        </button>
                        <button class="inventory__event button button--metal-sm" type="button"
                                @click="removeItem(item)">Выбросить
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<style scoped lang="scss">
@use "inventory";
</style>
<script lang="ts">
import { defineComponent } from "vue";

export default defineComponent({
    name: "Professions",
    data: () => ({
        allProffessions: {
            COOKING: {
                id: 'cooking',
                name: 'Приготовление пищи',
                description: 'Позволяет создавать еду, восстанавливающую HP/MP',
                baseExpPerAction: 5,
                bonuses: [
                    { level: 5, effect: 'Разблокирует рецепты редкой еды' },
                    { level: 10, effect: '+10% к эффективности еды' }
                ]
            },
            BLACKSMITH: {
                id: 'blacksmith',
                name: 'Кузнечное дело',
                description: 'Позволяет создавать оружие и броню',
                baseExpPerAction: 8,
                bonuses: [
                    { level: 5, effect: 'Может улучшать предметы' },
                    { level: 10, effect: '+5% к характеристикам созданного снаряжения' }
                ]
            },

            ENCHANTING: {
                id: 'enchanting',
                name: 'Зачарование',
                description: 'Накладывает магические эффекты на предметы',
                baseExpPerAction: 7,
                bonuses: [
                    { level: 5, effect: 'Разблокирует мощные чары' },
                    { level: 10, effect: 'Шанс 15% создать чары двойной силы' }
                ]
            },
            HERBALISM: {
                id: 'herbalism',
                name: 'Травничество',
                description: 'Сбор лекарственных трав и создание зелий',
                baseExpPerAction: 6,
                bonuses: [
                    { level: 5, effect: 'Находит больше редких трав' },
                    { level: 10, effect: 'Шанс создать дополнительное зелье' }
                ]
            },
            ENGINEERING: {
                id: 'engineering',
                name: 'Инженерия',
                description: 'Создание механических устройств и ловушек',
                baseExpPerAction: 10,
                bonuses: [
                    { level: 5, effect: 'Может создавать бомбы' },
                    { level: 10, effect: 'Устройства работают на 20% дольше' }
                ]
            },
            JEWELCRAFTING: {
                id: 'jewelcrafting',
                name: 'Ювелирное дело',
                description: 'Огранка камней и создание украшений',
                baseExpPerAction: 9,
                bonuses: [
                    { level: 5, effect: 'Украшения дают +1 к характеристикам' },
                    { level: 10, effect: 'Шанс создать уникальное украшение' }
                ]
            },
            ARCHAEOLOGY: {
                id: 'archaeology',
                name: 'Археология',
                description: 'Поиск древних артефактов и реликвий',
                baseExpPerAction: 4,
                bonuses: [
                    { level: 5, effect: 'Может расшифровывать древние тексты' },
                    { level: 10, effect: 'Находит больше редких артефактов' }
                ]
            }
        }
    }),
});
</script>

<template>
    <div class="professions">

    </div>
</template>

<style scoped lang="scss">
@use "professions";
</style>

Оцени весь код и полностью его оптимизируй и и допиши не достающий код